################  Laboratorio 9 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
# Load libraries ----
library(pacman)
p_load(
tidyverse  # dplyr, tidyr, stringr, ggplot2, etc in unique library
, haven   # to read datset: .dta (stata), .spss, .dbf
, fastDummies  # for dummies
, stargazer  # for summary and econometrics tables
, sandwich  # for linear models
, lmtest # for robust standar error
, estimatr # for iv, cluster, robust standar error (LM_robust)
, lfe  # for fixed effects, cluster standar error
, caret # for easy machine learning workflow (mse, rmse)
, texreg # library for export table
, mfx # probit , logit model marginal effects
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
repdata <- read_dta("../../data/dataverse_files/mss_repdata.dta")
str(repdata)
lapply(repdata, class)
names(repdata)
attributes(repdata)
summary(repdata)
# Observamos las etiquetas de variable de los valores de las variables
lapply(repdata, attr, 'label')
lapply(repdata, attr, 'labels')
repdata$ccode %>% attr('label') # var label
# dummy por país para efectos fijos
repdata  <- dummy_cols(repdata, select_columns = 'ccode')
#
index <- grep("ccode_", colnames(repdata))
repdata$time_year <- repdata$year - 1978 # creando la variable temporal
list_vars <- names(repdata)[index]
list_vars[1]
i = 1
while(i < 42){
var <- paste0(list_vars[i],"_","time")
repdata[var]  <- repdata[list_vars[i]]*repdata$time_year
i = i + 1
}
View(repdata)
table1 <- repdata %>% dplyr::select(any_prio, any_prio_on, any_prio_off,
war_prio, war_prio_on, war_prio_off, war_col, war_inc, war)
stargazer(table1)
table1 <- repdata %>% dplyr::select(any_prio, any_prio_on, any_prio_off,
war_prio, war_prio_on, war_prio_off, war_col, war_inc, war,
GPCP, GPCP_g, GPCP_g_l,gdp_g, gdp_g_l,
y_0, polity2l, polity2l_6, ethfrac, relfrac, Oil, lmtnest, lpopl1, tot_100_g) %>% as.data.frame()
stargazer(table1)
stargazer(table1, title = "Descriptive Statistics", digits = 2,
covariate.labels = c("Civil conflict with ≥25 deaths: (PRIO/
Uppsala)","Onset","Offset","Civil conflict with ≥1,000 deaths:
PRIO/Uppsala","Onset","Offset","Collier and Hoeffler (2002)",
"Doyle and Sambanis (2000)","Fearon and Laitin (2003)"))
stargazer(table1, title = "Descriptive Statistics", digits = 2,
covariate.labels = c("Civil conflict with ≥25 deaths: (PRIO/
Uppsala)","Onset","Offset","Civil conflict with ≥1,000 deaths:
PRIO/Uppsala","Onset","Offset","Collier and Hoeffler (2002)",
"Doyle and Sambanis (2000)","Fearon and Laitin (2003)"),
min.max = F)
list_vars <- c("Civil conflict with ≥25 deaths: (PRIO/
Uppsala)","Onset","Offset","Civil conflict with ≥1,000 deaths:
PRIO/Uppsala","Onset","Offset","Collier and Hoeffler (2002)",
"Doyle and Sambanis (2000)","Fearon and Laitin (2003)",
"Annual rainfall (mm), GPCP measure",
"Annual growth in rainfall, time t",
"Annual growth in rainfall, time t-1",
"Annual economic growth rate, time t",
"Annual economic growth rate, time t-1",
"Log(GDP per capita), 1979",
"Democracy level (Polity IV score, -10 to 10), time t-1",
"Democracy indicator (Polity IV score > 15),
time t-1",
"Ethnolinguistic fractionalization (source:
Atlas Marodov Mira)",
"Religious fractionalization (source: CIA
Factbook)",
"Oil-exporting country (source: WDI)",
"Log(mountainous) (source: Fearon and
Laitin 2003)",
"Log(national population), time t-1
(source: WDI)",
"Growth in terms of trade, time t (source:
WDI)"
)
stargazer(table1, title = "Descriptive Statistics", digits = 2, # decimales con 2 digitos
covariate.labels = list_vars,  # Lista de etiquetas
summary.stat = c("mean", "sd", "n"), # se especifica el orden de los estadísticos
min.max = F, # borrar el estadístico de maximo y minimo
notes = "Note.—The source of most characteristics is the World Bank’s World Development Indicators (WDI)."
, notes.append = FALSE, # TRUE append the significance levels
notes.align = 'l'
, out = "../../output/tables/summary_r.tex")
ols_model <- lm(gdp_g ~ GPCP_g + GPCP_g_l, data = repdata)
attributes(ols_model)
ols_model$coefficients  # coeficientes
ols_model$fitted.values  # Y estimado
summary(ols_model)
summary(ols_model)$call
summary(ols_model)$coef
coeftest(ols_model, vcov = vcovHC(ols_model, "HC")) # Clasical white robust
coeftest(ols_model, vcov = vcovHC(ols_model, "HC0"))
coeftest(ols_model, vcov = vcovHC(ols_model, "HC1")) # Huber-White robust (STATA)
coeftest(ols_model, vcov = vcovHC(ols_model, "HC2")) # Eicker-Huber-White robust
coeftest(ols_model, vcov = vcovHC(ols_model, "HC3"))
coeftest(ols_model, vcov = vcovHC(ols_model, "HC4"))
robust_model <- coeftest(ols_model,
vcov = vcovCL,  # Matrix varianza-covarianza cluster (CL)
type = "HC1",
cluster = ~ ccode)
sd_robust <- robust_model[,2]
ols_model1 <- lm_robust(gdp_g ~ GPCP_g + GPCP_g_l, data = repdata,
clusters = ccode, se_type = "stata")
summary(ols_model1)
attributes(ols_model1)
ols_model1$r.squared
rmse1 <- RMSE(ols_model1$fitted.values, repdata$gdp_g ) # root mean squeare error
RMSE(ols_model1$fitted.values, repdata$gdp_g )^2 # mean square error
glance(ols_model1)
tidy(ols_model1)
tidy(ols_model1)
htmlreg(ols_model1)
tidy(ols_model1)[2,2] # coeficiente
tidy(ols_model1)[2,6] # limite inferior
tidy(ols_model1)[2,7] # limite superior
# Usando LM y luego coestest para los error standar robusto
m1 <- lm(gdp_g ~ GPCP_g + GPCP_g_l, data = repdata)
lm_rmse1 <- round(RMSE(m1$fitted.values, repdata$gdp_g ) ,2 )
robust_model1 <- coeftest(m1,
vcov = vcovCL,  # Matrix varianza-covarianza cluster (CL)
type = "HC1",
cluster = ~ ccode)
sd_robust_model1 <- robust_model1[,2]
model1_lower = coefci(m1, df = Inf,
vcov. = vcovCL, cluster = ~ ccode, type = "HC1")[2,1]
model1_upper = coefci(m1, df = Inf,
vcov. = vcovCL, cluster = ~ ccode, type = "HC1")[2,2]
control_vars <- c("y_0", "polity2l", "ethfrac", "relfrac", "Oil", "lmtnest","lpopl1")
names(repdata)
index_country_time <- grep("_time$", colnames(repdata))
country_time_trend <-names(repdata)[index_country_time]
model2_formula <- as.formula(
paste("gdp_g",
"~",
paste("GPCP_g","GPCP_g_l", paste(country_time_trend, collapse = "+"),
paste(control_vars, collapse = "+")
,  sep="+")
)
)
ols_model2 <- lm_robust(model2_formula, data = repdata,
summary(ols_model2)
glance(ols_model2)
model5_formula <- as.formula(
paste("gdp_g",
"~",
paste("GPCP_g","GPCP_g_l","tot_100_g",
paste(country_time_trend, collapse = "+")
, sep="+")
)
)
ols_model5 <- lm_robust(model5_formula, data = repdata,
clusters = ccode, se_type = "stata", fixed_effects = ~ ccode)
summary(ols_model5)
tidy(ols_model5)
glance(ols_model5)
rmse5 <- RMSE(ols_model5$fitted.values, repdata$gdp_g ) # root mean squeare error
model5_formula <- as.formula(
paste(
paste("any_prio",
"~",
paste("gdp_g","gdp_g_l",
paste(country_time_trend, collapse = "+")
, paste(control_vars, collapse = "+")
, sep="+")
)
, paste("GPCP_g", "GPCP_g_l",
paste(country_time_trend, collapse = "+")
, paste(control_vars, collapse = "+")
, sep="+")
, sep=" | "
)
)
ols_model5 <- iv_robust(model5_formula, data = repdata,
clusters = ccode, se_type = "stata")
summary(ols_model5)
glance(ols_model5)
tidy(ols_model5)
rmse5 <- round(RMSE(ols_model5$fitted.values, repdata$any_prio ), 2)
