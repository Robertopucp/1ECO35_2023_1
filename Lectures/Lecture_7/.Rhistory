w <- 10
while (w > 7  & w <= 15){
coin <- round( runif(1) )
coin
if (coin == 1) {
w <- w + 2
} else {
w <- w - 10
}
}
print(w)
## For ----
ages<-  c(21, 23, 25, 24, 20)
for (age in ages) {
print(age+10 )
}
## For and Next ----
for (i in 1:50) {
if(i %in% 15:20) { # Ignora los primeros 20 elementos
next
print(i  + 1000)
}
cat("Ejecutanto",i,"\n")
}
## For and Next, break ----
for (j in 1:100){
print(j)
if(j > 20){
break
}
}
## While + break ----
while (TRUE){
coin <- round( runif(1) )  # redondear al entero más cercano
if (coin == 1) {
break
} else {
print(point)
}
}
calculator <- function(x,y,z)
{
result = x*y*z
return(result)
}
calculator( 158, 38, 10 )
calculator( 158, 38)
calculator <- function(x,y,z)
{
result = x*y*z
return(result)
}
calculator( 158, 38, 10 )
calculator_square <- function(x,y){
x2 <- x * x
y2 <- y * y
result <- x2 * y2
return(list(x2,y2,paste0("La multiplicación del cuadrado es:", result)) )
}
calculator_square(3, 4)[1]
calculator_square(3, 4)[[1]] # para ontener el elemento simple
calculator_square_2 <- function(x,y){
x2 <- x * x
y2 <- y * y
result <- x2 * y2
if (200 >= result) {
return( cat( "Large number. Get only the result variable: ", result) )
} else {
return( print( "Too large number. Do not return variables!") )
}
}
w <- 10
while (w > 7  & w <= 15){
coin <- round( runif(1) )
print(coin)
if (coin == 1) {
w <- w + 2
} else {
w <- w - 10
}
}
#  laboratorio 1 ####
# Curso: Laboratorio de R y Python
# @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# Libraries ####
#install.packages("dplyr")
#install.packages("stringr")
library(dplyr) # library for cleaning datasets
library(stringr)
#-----------------------------------------------------------------#
#Laboratorio 1 Python
print("Hola Mundo")
## Tipo de variable ####
#Correr la lineas de codugo Ctrl + enter
# Codigo a texto Ctrl + Shift + c"
a1 <- 3.1416
print(a1)
typeof(a1)
class(a1)
is.numeric(a1)
# float to int
a2 <- as.integer(a1)
typeof(a2)
class(a2)
is.numeric(a2)
b1 <- 10000
typeof(b1)
b1 <- as.integer(10000)
# Round a number
print(round(4.51))
# power
print(4^2)
# operator pip %>% (Control + shift + M)
x <- sqrt(150) ; x   # ; print()
y <- log(x) ; y
z <- round(y, 2) ; z
w <- abs(z) ; w
150 %>% sqrt() %>% log() %>% round(2) %>% abs()
sqrt(150) %>% log() %>% round(2) %>% abs()
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% pow(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% power(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% ^2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% *2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% **2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% ^2
2^2
pow(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer()^2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% **2
################  laboratorio 7 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
## Clean dataset
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
p_load(reshape, tidyverse, haven)
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
panel <- read_dta("../../data/panel_2016_2018.dta", encoding = "latin1")
View(panel)
# nombre de las variables en minuscula
colnames(panel) <- tolower(colnames(panel))
# filtramos nuestras variables de interés
colnames(panel)
index =  grep("(año)|(conglome)|(vivienda)|(hogar)|(estrato)|(mieperho)|(gashog2d)|
(inghog1d)|(pobreza)|(factor07)",
colnames(panel))
print(colnames(panel)[index])
panel <- panel  |> dplyr::rename("year_16" = "año_16", "year_17" = "año_17", "year_18" = "año_18", "year_19" = "año_19",
"year_20" = "año_20", "cong"= "conglome", "viv" ="vivienda" )
panel <- panel[,index]
panel
panel$hog <- seq(1,dim(panel)[1])
panel <- panel  %>%
select(cong, viv, hog, everything())
new_panel <- reshape(data = panel, idvar = c("cong", "viv", "hog"), varying = 4:48, sep="_", timevar = "time_var",
times = c(16,17,18,19,20), direction = "long")
View(new_panel)
new_panel$cong <- NULL  # borrar columnas
new_panel$viv <- NULL  # borrar columnas
new_panel$hog <- NULL  # borrar columnas
new_panel$time_var <- NULL  # borrar columnas
new_panel <- new_panel[order(new_panel$conglome, new_panel$vivienda, new_panel$hogar, new_panel$year),]
################  laboratorio 7 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
## Clean dataset
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
p_load(reshape, tidyverse, haven)
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#------- Reshape -----------
# load panel dataset
panel <- read_dta("../../data/panel_2016_2018.dta", encoding = "latin1")
# nombre de las variables en minuscula
colnames(panel) <- tolower(colnames(panel))
# filtramos nuestras variables de interés
colnames(panel)
# Filtramos algunas variables usando grepl (detecta patrones en cadena de caracteres)
index =  grep("(año)|(conglome)|(vivienda)|(hogar)|(estrato)|(mieperho)|(gashog2d)|
(inghog1d)|(pobreza)|(factor07)",
colnames(panel))
print(colnames(panel)[index])
# rename años
panel <- panel  |> dplyr::rename("year_16" = "año_16", "year_17" = "año_17", "year_18" = "año_18", "year_19" = "año_19",
"year_20" = "año_20", "cong"= "conglome", "viv" ="vivienda" )
# Filtramos las columnas
panel <- panel[,index]
"Nos quedamos con 47 variables"
# identificador del hogar
panel$hog <- seq(1,dim(panel)[1])
# ordenando
panel <- panel  %>%
select(cong, viv, hog, everything())
# Usando la libreria reshape
new_panel <- reshape(data = panel, idvar = c("cong", "viv", "hog"), varying = 4:48, sep="_", timevar = "time_var",
times = c(16,17,18,19,20), direction = "long")
new_panel$cong <- NULL  # borrar columnas
new_panel$viv <- NULL  # borrar columnas
new_panel$hog <- NULL  # borrar columnas
new_panel$time_var <- NULL  # borrar columnas
new_panel$sub_conglome_20 <- NULL  # borrar columnas
new_panel$pobrezav_20 <- NULL  # borrar columnas
# ordenando para inspección visual de panel de datos
new_panel <- new_panel[order(new_panel$conglome, new_panel$vivienda, new_panel$hogar, new_panel$year),]
################  Laboratorio 7 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
p_load(readxl, lubridate, tidyverse, stringi)
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- data.frame(read_excel("../../data/Centro_salud/Centro_salud_mental.xls"))
sapply(data, typeof)
apply(data , 2, function(x) sum(is.na(x)))
# Nombre de las variables a minuscula
colnames(data) <- tolower(colnames(data)) # capital letters to lower letters
################  Laboratorio 7 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
p_load(readxl, lubridate, tidyverse, stringi)
#stringi : funciones regex
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- data.frame(read_excel("../../data/Centro_salud/Centro_salud_mental.xls"))
sapply(data, typeof)
apply(data , 2, function(x) sum(is.na(x)))
# Nombre de las variables a minuscula
colnames(data) <- tolower(colnames(data)) # capital letters to lower letters
#------- Regex -----------
# Patrones basicos
# 1. [] : permitir indicar tipo de caracter, definir el rango de las caracteres
# 2. (): permite agrupar caracteres
# 3. \\-,  \\#,  \\?, se especifica carcateres espaciales
# 4. " " : dentro de comillar se debe espeficiar el patron del texto
# \\\ , un \;  \\\\, para 2\
# 2: patrones de texto
# \\d : identifica digitos
# \\w : identifica caracteres alfanumericos (letras y numeros)
# \\s : identificas espacios
# [a-z], [A-Z], [a-zA-Z] : rango de letras mayusculas o minusculas
# [0-9]: rango de numeros
# \\D : NO identifica digitos
# \\W : NO identifica caracteres alfanumericos (letras y numeros)
# \\S : NO identificas espacios
# [^0-9] : No caputara numero del rango 0 al 9
#  [^a-zA-Z]: No captura o identifica letras (mayuscula o minuscula)
"Patrones de inicio y fin"
# ^\\d, ^M, ^2, ^\\-  : captura inicio de un texto
# \\d$, _M$, -2$, \\-$: captura los textos que terminan en digitos, M, 2 o -
# \\. : identificar cualquier tipo de caracter (espacios, numeros, letras, #!%$)
"jdhdh 77575"
# [0-9]*: astericos permite capterar ninguno, uno o mas de uno
# [0-9]+: el signo mas permite capturar uno o mas uno
# [0-9][a-z]? : ?, permite capturar a lo mas una ocurrencia.
# 1.0 Extraer texto ----
data$inst1 <- apply(data['institución_ruc'],
1 ,    # margin 1: aplicar la funcion por filas , por observaciones
function(x) gsub("[0-9]", '', x))
data$inst1 <- apply(data['institución_ruc'],
1 ,    # margin 1: aplicar la funcion por filas , por observaciones
function(x) gsub("[0-9]", '', x))
# gsub permitir reemplazar, gusb( se espeficica el patron de texto, '', string)
"[0-9]*: ninguno, uno o mas digitos"
data$inst2 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("\\d", '', x))
"\\d: digitos"
# usando la funcion extraer letras y espacio
data$inst3 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[a-zA-Z\\s]+"))
data$inst4 <- sapply(data$institución_ruc,
function(x) str_replace(x,"[^a-zA-Z\\s]+",''))
#  substituye lo que sea diferente a letras y espacio por nada ('').
# 2.0 Extraer numero ----
data$ruc1 <- sapply(data$institución_ruc,
function(x) gsub("[a-zA-Z]", '', x))
# se extrae digitos de uno o mas ocurrencia
data$ruc2 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[0-9]+"))
# extraer solo 3 digitos del rango 0-9
data$ruc3 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[0-9]{3}"))
# {3} me permtie extraer 3 digitos
data$ruc4 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[0-9]{1,}"))
# usando [^0-9], lo que sea diferente de numero en el rango 0 a 9,
# me reemplazas por nada.
data$ruc5 <- sapply(data$institución_ruc,
function(x) gsub("[^0-9]", '', x))
# usando \\D, lo que sea diferentes de digitos, me reemplazas por nada ''
data$ruc6 <- sapply(data$institución_ruc,
function(x) gsub("\\D", '', x))
# Retirar :00:00 , !%& y 00/00/00
# usando str_replace para reemplazar caracteres
# () permite agrupar, | (permite espeficar diferentes textos)
# 3.0 str_ extract ----
data$fecha_apertura <- sapply(data$fecha_apertura,
function(x) str_replace(x,"(:00:00)|(!%&)|(00/00/00)", ''))
data$gps
data$coordinates <- sapply(data$gps,
function(x) str_extract(x,"-[0-9]+.[0-9]+,-[0-9]+.[0-9]+"))
data$coordinates
x <- "dada--dss kks. 12434 distrito  San damian   region Huarochiri"
str_match(x,"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")
str_match(x,"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")[2] # distrito
str_match(x,"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")[3]  # region
################  Laboratorio 7 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
p_load(readxl, lubridate, tidyverse, stringi)
#stringi : funciones regex
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- data.frame(read_excel("../../data/Centro_salud/Centro_salud_mental.xls"))
sapply(data, typeof)
apply(data , 2, function(x) sum(is.na(x)))
# Nombre de las variables a minuscula
colnames(data) <- tolower(colnames(data)) # capital letters to lower letters
#------- Regex -----------
# Patrones basicos
# 1. [] : permitir indicar tipo de caracter, definir el rango de las caracteres
# 2. (): permite agrupar caracteres
# 3. \\-,  \\#,  \\?, se especifica carcateres espaciales
# 4. " " : dentro de comillar se debe espeficiar el patron del texto
# \\\ , un \;  \\\\, para 2\
# 2: patrones de texto
# \\d : identifica digitos
# \\w : identifica caracteres alfanumericos (letras y numeros)
# \\s : identificas espacios
# [a-z], [A-Z], [a-zA-Z] : rango de letras mayusculas o minusculas
# [0-9]: rango de numeros
# \\D : NO identifica digitos
# \\W : NO identifica caracteres alfanumericos (letras y numeros)
# \\S : NO identificas espacios
# [^0-9] : No caputara numero del rango 0 al 9
#  [^a-zA-Z]: No captura o identifica letras (mayuscula o minuscula)
"Patrones de inicio y fin"
# ^\\d, ^M, ^2, ^\\-  : captura inicio de un texto
# \\d$, _M$, -2$, \\-$: captura los textos que terminan en digitos, M, 2 o -
# \\. : identificar cualquier tipo de caracter (espacios, numeros, letras, #!%$)
"jdhdh 77575"
# [0-9]*: astericos permite capterar ninguno, uno o mas de uno
# [0-9]+: el signo mas permite capturar uno o mas uno
# [0-9][a-z]? : ?, permite capturar a lo mas una ocurrencia.
# 1.0 Extraer texto ----
data$inst1 <- apply(data['institución_ruc'],
1 ,    # margin 1: aplicar la funcion por filas , por observaciones
function(x) gsub("[0-9]", '', x))
data$inst1 <- apply(data['institución_ruc'],
1 ,    # margin 1: aplicar la funcion por filas , por observaciones
function(x) gsub("[0-9]", '', x))
# gsub permitir reemplazar, gusb( se espeficica el patron de texto, '', string)
"[0-9]*: ninguno, uno o mas digitos"
data$inst2 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("\\d", '', x))
"\\d: digitos"
# usando la funcion extraer letras y espacio
data$inst3 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[a-zA-Z\\s]+"))
data$inst4 <- sapply(data$institución_ruc,
function(x) str_replace(x,"[^a-zA-Z\\s]+",''))
#  substituye lo que sea diferente a letras y espacio por nada ('').
# 2.0 Extraer numero ----
data$ruc1 <- sapply(data$institución_ruc,
function(x) gsub("[a-zA-Z]", '', x))
# se extrae digitos de uno o mas ocurrencia
data$ruc2 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[0-9]+"))
# extraer solo 3 digitos del rango 0-9
data$ruc3 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[0-9]{3}"))
# {3} me permtie extraer 3 digitos
data$ruc4 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[0-9]{1,}"))
# usando [^0-9], lo que sea diferente de numero en el rango 0 a 9,
# me reemplazas por nada.
data$ruc5 <- sapply(data$institución_ruc,
function(x) gsub("[^0-9]", '', x))
# usando \\D, lo que sea diferentes de digitos, me reemplazas por nada ''
data$ruc6 <- sapply(data$institución_ruc,
function(x) gsub("\\D", '', x))
# Retirar :00:00 , !%& y 00/00/00
# usando str_replace para reemplazar caracteres
# () permite agrupar, | (permite espeficar diferentes textos)
# 3.0 str_ extract ----
data$fecha_apertura <- sapply(data$fecha_apertura,
function(x) str_replace(x,"(:00:00)|(!%&)|(00/00/00)", ''))
# Extraer las coordenadas de la variables GPS
# findall <> str_extract
data$coordinates <- sapply(data$gps,
function(x) str_extract(x,"-[0-9]+.[0-9]+,-[0-9]+.[0-9]+"))
# [0-9]{1,2} uno o digitos
# @-1.15,-74.155$%&//5
#------ 4.0 str_match ---------
# Extraer una seccion del texto sin especificar la forma completa del texto
# python search <> str_match
x <- "dada--dss kks. 12434 distrito  San damian   region Huarochiri"
str_match(x,"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")
# \\d*: ninguna, uno o mas ocurrencias
# \\d+: uno o mas ocurrencias
#\\.* : captura ninguna, una, o mas de un caracter (cualquiera: espacios, letras, numeros, #!%&/())
# () permite capturar lo que me interesa
str_match(x,"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")[2] # distrito
str_match(x,"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")[3]  # region
# Usando dplyr
data <- data |> rowwise() |>
mutate(distrito_var = str_match( dirección ,
"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")[2],
region_var = str_match( dirección ,
"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")[3]
) |> ungroup()
View(data[,c('dirección_var','region_var')])
View(data[,c('dirección_var','region_var')])
View(data[,c('dirección','region_var',"region_var")])
View(data[,c('dirección','region_var',"dsitrito_var")])
View(data[,c('dirección','region_var',"distrito_var")])
data <- data |> rowwise() |>
mutate(distrito_var = str_match( dirección ,
"[D/d]istrito ([\\w+\\s\\-]+) [R/r]egion ([\\w+\\s]+)")[2],
region_var = str_match( dirección ,
"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")[3]
) |> ungroup()
# ungroup () desactiva el rowwise()
View(data[,c('dirección','region_var',"distrito_var")])
data$telefono
data$telefono_fijo <- sapply(data$telefono,
function(x) str_match(x,"(\\d+\\-\\d+)")[2])
data$telefono_fijo
data$telefono_fijo <- sapply(data$telefono,
function(x) str_match(x,"(\\d+\\-\\d+)$")[2])
data$telefono_fijo
View(data)
match_output <- stringr::str_match(data$resolucion,
'(\\d+)-([0-9]+)\\s([A-Z]+)')
# DS-54-2015 PCM
# pip str_match , stringr, str_match
"[0-9]+: existe uno o mas digitos"
data <- data %>% mutate(code_res = match_output[,2], year_res = match_output[,3],
entidad_res = match_output[,4])
View(data)
junin_data = read_excel("../../data/Region_Junin.xlsx")
newbase <- dplyr::filter(junin_data, grepl('AC', District))
newbase <- dplyr::filter(junin_data, grepl('pacha', Place))
View(junin_data)
newbase <- junin_data %>% filter(grepl('pacha', Place, ignore.case=TRUE))
View(newbase)
newbase <- junin_data %>% filter(grepl('^hu', District, ignore.case=TRUE))
newbase <- junin_data %>% filter(grepl('ro$', Place, ignore.case=TRUE))
newbase <-  junin_data %>% filter(grepl('^ac*', Place, ignore.case=TRUE))
newbase <-  junin_data %>% filter(grepl('^ac+', Place, ignore.case=TRUE))
data <- data |> dplyr::mutate(
date = dmy( fecha_apertura  )
)
data$fecha_apertura_format <-  as.Date(data$fecha_apertura,format='%d/%m/%Y')
#date un different columns
data$year = as.numeric(format(data$fecha_apertura_format ,"%Y"))
data$month = as.numeric(format(data$fecha_apertura_format ,"%m"))
data$day = as.numeric(format(data$fecha_apertura_format ,"%d"))
