"Ucayali"))
)
# hv103 : la persona pasó la noche en el hogar
design <- svydesign(
data = endes_health_child,
ids = ~ hv001, # conglome
strata = ~ hv022,  # estrato
weights = ~ peso  # factor de expansión
)
prop.table(svytable(~ region + desncro, design = design), 1) %>%
as.data.frame() %>%
filter(desncro == 1) %>%
mutate(ratechildcro = Freq*100) %>%
ggplot(aes(y = reorder( region , -ratechildcro ) , x = ratechildcro    )) +
geom_col() +
scale_fill_identity(guide = "none") +
theme_minimal()+
xlab("")+
ylab("Department")
### Mental health -----------------------------
# Este módulo es respondido por el jefe o jefa del hogar
endes_mental <- salud %>%
left_join(rech0, by = "hhid") %>%
left_join(rech23, by = "hhid") %>%
left_join(rech1, by = c("hhid", "qsnumero"="hvidx"))
# Dummies de depression #
" Preguntas respecto a los últimos 14 días"
col_repl <- c("qs700a", "qs700b", "qs700c", "qs700d","qs700e", "qs700f",
"qs700g", "qs700h","qs700i")
attr(endes_mental$qs700a, "labels")
# reemplazamos los valores 9 por missing
endes_mental[col_repl] <- sapply(endes_mental[col_repl],
function(x) replace(x, x == 9, NA))
endes_mental <- endes_mental |>
rename(low_interest = qs700a,
depressed = qs700b,
not_sleep = qs700c,
tired = qs700d,
poor_appetite = qs700e,
pay_attention = qs700f,
difficult_move = qs700g,
suicide =  qs700h,
feel_bad = qs700i) |> rowwise() |>
mutate(
phq9_score = sum(
low_interest,depressed, not_sleep, tired, poor_appetite,
pay_attention, difficult_move, suicide, feel_bad
, na.rm = T)
) |> ungroup()
attach(endes_mental) # acceso directo de las variables
endes_mental$mild_depression <- ifelse(phq9_score<5 | phq9_score >9, 0,
ifelse(phq9_score>=5 | phq9_score <=9, 1, NA))
endes_mental$moderate_depression <- ifelse(phq9_score<10 | phq9_score >14, 0,
ifelse(phq9_score>=10 | phq9_score <=14, 1, NA))
endes_mental$severe_depression <- ifelse(phq9_score<15, 0 ,
ifelse(phq9_score>=15, 1, NA))
detach(endes_mental) # elmininar el acceso directo de las variables
# Violencia Doméstica -----------------------------------------------------
# unir bases de datos
# Master Data es la base RECH84DV
# Uniré la bases de información socioeconómica personal rech1 e
# información a nivel hogar (rech0 y rech24)
# En este caso, el identificador de la mujer es el caseid
# En esta base de datos se entrevistó a mujeres casadas o en convivencia.
# A partir de la variable caseid, creamos el HHID (id hogar) y HVIDX (id persona)
dv[c('hhid','hvidx')] <- str_split_fixed(dv$caseid, " ", 2) # split del espacio vacío
# 2 significa la cantidad de palabras separadas
dv$hvidx <- as.numeric( dv$hvidx )
dv_endes <- dv %>%
left_join(rech1, by = c("hhid","hvidx")) %>%
left_join(rech0, by = "hhid") %>%
left_join(rech23, by = "hhid")
# etiquetas
sapply(dv_endes, attr, 'label')
sapply(dv_endes, attr, 'labels')
# Violencia psicológica #
dv_endes <- dv_endes %>%
mutate(
humiliated = ifelse(d103a %in% c(1,2), 1 ,
ifelse(d103a %in% c(0,3), 0, NA)),
threatened = ifelse(d103b %in% c(1,2), 1 ,
ifelse(d103b %in% c(0,3), 0, NA)),
psycho = ifelse(humiliated==1 | threatened== 1, 1 ,
ifelse(humiliated==0 & threatened== 0, 0, NA))
)
table(dv_endes$psycho)
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
p_load(readxl, tidyverse, foreign, ggthemes, datos)
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
value_label <- read.spss("../../data/Riesgo_morosidad.sav"
)
# etiqueta de valores
attributes(value_label)$label.table
#----------------------------------------------------------#
datospss <- read.spss("../../data/Riesgo_morosidad.sav",
use.value.labels = F,
to.data.frame = TRUE)
attributes(datospss)$variable.labels  # etiqueta de variable
# Generando variables categóricas
datospss$sexo      <- factor(datospss$sexo, levels = c(1, 2),
labels = c("Masculino", "Femenino"))
datospss$morosidad <- factor(datospss$morosidad, levels = c(1,2),
labels = c("No moroso", "Moroso"))
datospss$fonopart  <- factor(datospss$fonopart, levels = c(1, 2),
labels = c("No", "Si"))
datospss$fonolab   <- factor(datospss$fonolab, levels = c(1, 2),
labels = c("No", "Si"))
datospss$autovaluo <- factor(datospss$autovaluo, levels = c(1, 2),
labels = c("No", "Si"))
datospss$esaval    <- factor(datospss$esaval, levels = c(1, 2),
labels = c("No", "Si"))
datospss$tieneaval <- factor(datospss$tieneaval, levels = c(1, 2),
labels = c("No", "Si"))
datospss$tiporenta <- factor(datospss$tiporenta, levels = c(2, 3),
labels = c("Fijo", "Variable"))
datospss$dpto      <- factor(datospss$dpto,
levels = c(1, 2, 3, 4, 5, 6),
labels = c("Lima", "Trujillo", "Arequipa",
"Cusco", "Ica", "Piura"))
# Generamos la figura
ggplot(datospss) + aes(morosidad)
## Gráfico de barras ----------------------------------------
ggplot(datospss) + aes(y = morosidad) +
geom_bar(stat = "count")  # por default es count de contabilizar
# ggplot(): objeto figura y aes: ejes
# equivalencias
ggplot(datospss) +  aes(x = morosidad) + geom_bar() # es equivalente
ggplot(datospss, aes(y = morosidad)) + geom_bar()     # es equivalente
# Cambio de orientación ( vertical )
ggplot(datospss) +  aes(y = morosidad) + geom_bar()
# usando coord_flip <> aes(y= morisidad)
ggplot(datospss) + aes(morosidad) + geom_bar() +
coord_flip()
# Temas de fondo con theme()
ggplot(datospss) + aes(morosidad) +
geom_bar() + theme_test()
ggplot(datospss) + aes(y = morosidad) +
geom_bar() + theme_classic()
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_bw(10)
# Añadiendo titulo principal y titulo en ejes
ggplot(datospss, aes(morosidad)) + geom_bar()+
labs(title = "Gráfico de Barras \n de \n morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
browseURL("http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf")
ggplot(datospss, aes(morosidad)) +
geom_bar(color = "blue", fill = "white")+ # color : birdes, fill: color del contenido
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss, aes(morosidad)) +
geom_bar(color = "blue", fill = c("white","orange"))+
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
browseURL("https://www.rapidtables.com/web/color/RGB_Color.html")
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "#0000FF", fill = c("#FFFFFF", "#FFA500")) +
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack(), color = "black"
, width = 0.8) +
theme_classic() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")  +
scale_fill_manual(values = c("darkolivegreen3", "firebrick2"))
# width: ancho de la barra
##### La opción position = "stack" es por default
#     (Stacked Bar Plot en proporción)
ggplot(datospss, aes(y = tiporenta, fill = morosidad ) ) +
geom_bar(position = position_fill()) +
theme_bw() +
labs(title = "Situación de la Morosidad según el Tipo de Renta (%)",
x = "Tipo de Renta",
y = "Proporción") +
scale_fill_manual(values = c("darkolivegreen3", "firebrick2"))
# Histogramas  ---------------------------------------------
# (variable continua)
ggplot(datospss) + aes(edad) + geom_histogram()
# borde blanco de las barras
ggplot(datospss) + aes(edad) + geom_histogram(color = "white")
# borde balnco de la barra y ancho de barra igual a 20
ggplot(datospss) + aes(edad) + geom_histogram(color = "white",
binwidth = 10) #bindwith: ancho de base
# bins: cantidad de intervalos
ggplot(datospss) + aes(edad) + geom_histogram(color = "white",
bins = 20)
# theme_classic()
ggplot(datospss) + aes(edad) + geom_histogram(color = "black",
fill = "deepskyblue3") +
labs(title = "Histograma de la Edad",
x = "Edad",
y = "Frecuencia absoluta") +
theme_classic() # tema clasico
ggplot(datospss, aes(edad) )+ geom_histogram(color = "white",
fill = "deepskyblue3") +
labs(title = "Histograma de la Edad",
x = "Edad",
y = "Frecuencia absoluta") +
theme_test() +
scale_y_continuous( expand = c(0, 0) ) # parte desde origen
# borrar el espacio debajo del histograma
# Histograma de la edad según situación de morosidad
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.5, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = "bottom") +# posición de la leyenda, posiciónd de titutlo
labs(x = "Edad",
y = "Frecuencia absoluta")
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.5, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = "bottom",   # leyenda ubicada en la parte inferior
legend.title = element_blank()) + # sin titulo en la leyenda
labs(x = "Edad",
y = "Frecuencia absoluta")
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.4, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = c(0, 0) ,
legend.title = element_blank()) +
labs(x = "Edad",
y = "Frecuencia absoluta")
ggplot(datospss) + aes(edad, fill = dpto) +
geom_histogram(alpha = 0.5, color = "azure4")
ggplot(datospss) + aes(edad, fill = dpto) +
geom_histogram(alpha = 0.5, color = "azure4") +
facet_grid(dpto ~ .)  +   #  filas ~ columnas (por filas)
theme(legend.position = "none")
ggplot(datospss) + aes(edad, fill = dpto) +
geom_histogram(alpha = 0.5, color = "azure4") +
facet_grid(. ~ dpto)  +   # por columnas
theme(legend.position = "none")
ggplot(datospss) + aes(edad, fill = dpto) +
geom_histogram(alpha = 0.5, color = "azure4") +
facet_wrap(~ dpto)  +    # facet_wrap("dpto"),
theme_classic() +
theme(legend.position = "none",
strip.background = element_blank()
)  +
labs(x = "Edad",
y = "")
str(economics)
write.csv(economics, "../../data/economics.csv", row.names = F)
View(economics)
ggplot(economics) + aes(x = date, y = unemploy) +
geom_line(size = 0.6, color = "#56B4E9") +
theme_minimal() +
labs(
x = "Years", y = "Unemployment",
)
ggplot(economics) + aes(x = date, y = psavert) +
geom_line(size = 0.5, color = "azure4") +
theme_few() +
labs(title= "Saving rate (%)",
x = "Years", y = "",
) +
theme(
plot.title = element_text(hjust = 0.5),
title =element_text(size=12),
axis.title.x = element_text(size=10,color='black')
) +
scale_x_date( limits = as.Date(c("1975-01-01","2015-01-01")), expand = c(0, 0) ) +
scale_y_continuous( breaks = seq(5,20,5) )
ggsave("../../output/plots/time_series_saving.png"
, height = 8  # alto
, width = 12  # ancho
, dpi = 320   # resolución (calidad de la imagen)
)
paises %>%
group_by(anio) %>%
summarise(pbi_pc_media = mean(pib_per_capita)) %>%
ggplot()+ aes(x = anio, y = pbi_pc_media) +
geom_line(color = "steelblue", size = 0.6) +
geom_point(size = 1.5) +
geom_text(aes(label = round(pbi_pc_media, 1)),
vjust = -2, size = 3)  +
labs(x= "Año",
y="PBI per-cápita media") +
scale_x_continuous(breaks = seq(1952,2007,5)) +
scale_y_continuous(breaks = seq(2500,15000,2500), limits = c(2500,12500)) +
theme_classic(11)
ggsave("../../output/plots/time_series_pbi.png"
, height = 5  # alto
, width = 8  # ancho
, dpi = 320   # resolución (calidad de la imagen)
)
# Tipos de markers
paises %>%
group_by(anio) %>%
summarise(pbi_pc_media = mean(pib_per_capita)) %>%
ggplot()+ aes(x = anio, y = pbi_pc_media) +
geom_line(color = "steelblue", size = 0.6) +
geom_point(size = 1.5, shape = 2) +
geom_text(aes(label = round(pbi_pc_media, 1)),
vjust = -2, size = 3)  +
labs(x= "Año",
y="PBI per-cápita media") +
scale_x_continuous(breaks = seq(1952,2007,5)) +
scale_y_continuous(breaks = seq(2500,15000,2500), limits = c(2500,12500)) +
theme_classic(11)
load("../../data/wage2015_subsample_inference.Rdata")
dim(data)
data <- data %>% filter(clg == 1)
ggplot(data, aes(y = lwage, x = exp1)) + geom_point()
ggplot(data, aes(y = lwage, x = exp1)) + geom_line()
# Bins plot #
#---------------------------------------------------------#
options(repr.plot.width = 10, repr.plot.height =10)  # plot size
data |> ggplot(aes(exp1,lwage)) +
stat_summary_bin(data=data, fun='mean', bins=20,
color='red', size=3.5, geom='point') +
geom_smooth(method = "lm", se = FALSE, formula = y ~ poly(x, 2),
linetype = "dotdash", color = "steelblue") +
theme_classic()+
labs(title= "Wage and experience relationship \n for people who went to college",
x = "Years of experience", y = "Log of Wage",
) +
theme(
axis.title = element_text(size=12,color='black'), # tamaño de titulo
axis.text = element_text(size=10,color='black'), # tamaño de ttulo en ejes
plot.title = element_text(hjust = 0.5) # titulo centrato
)
# tipos de linea: twodash, solid, longdash, dotted, dotdash, dashed
ggsave("../../output/plots/wage_exp.jpg"
, height = 7  # alto
, width = 9  # ancho
, dpi = 320   # resolución (calidad de la imagen)
)
################  Laboratorio 7 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
p_load(readxl, lubridate, tidyverse, stringi)
#stringi : funciones regex
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- data.frame(read_excel("../../data/Centro_salud/Centro_salud_mental.xls"))
sapply(data, typeof)
apply(data , 2, function(x) sum(is.na(x)))
# Nombre de las variables a minuscula
colnames(data) <- tolower(colnames(data)) # capital letters to lower letters
data$inst1 <- apply(data['institución_ruc'],
1 ,    # margin 1: aplicar la funcion por filas , por observaciones
function(x) gsub("[0-9]", '', x))
data$inst1 <- apply(data['institución_ruc'],
1 ,    # margin 1: aplicar la funcion por filas , por observaciones
function(x) gsub("[0-9]", '', x))
# gsub permitir reemplazar, gusb( se espeficica el patron de texto, '', string)
"[0-9]*: ninguno, uno o mas digitos"
data$inst2 <- apply(data['institución_ruc'],
1 ,
function(x) gsub("\\d", '', x))
"\\d: digitos"
# usando la funcion extraer letras y espacio
data$inst3 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[a-zA-Z\\s]+"))
data$inst4 <- sapply(data$institución_ruc,
function(x) str_replace(x,"[^a-zA-Z\\s]+",''))
#  substituye lo que sea diferente a letras y espacio por nada ('').
# 2.0 Extraer numero ----
data$ruc1 <- sapply(data$institución_ruc,
function(x) gsub("[a-zA-Z]", '', x))
# se extrae digitos de uno o mas ocurrencia
data$ruc2 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[0-9]+"))
# extraer solo 3 digitos del rango 0-9
data$ruc3 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[0-9]{3}"))
# {3} me permtie extraer 3 digitos
data$ruc4 <- sapply(data$institución_ruc,
function(x) str_extract(x,"[0-9]{1,}"))
# usando [^0-9], lo que sea diferente de numero en el rango 0 a 9,
# me reemplazas por nada.
data$ruc5 <- sapply(data$institución_ruc,
function(x) gsub("[^0-9]", '', x))
# usando \\D, lo que sea diferentes de digitos, me reemplazas por nada ''
data$ruc6 <- sapply(data$institución_ruc,
function(x) gsub("\\D", '', x))
# Retirar :00:00 , !%& y 00/00/00
# usando str_replace para reemplazar caracteres
# () permite agrupar, | (permite espeficar diferentes textos)
# 3.0 str_ extract ----
data$fecha_apertura <- sapply(data$fecha_apertura,
function(x) str_replace(x,"(:00:00)|(!%&)|(00/00/00)", ''))
# Extraer las coordenadas de la variables GPS
# findall <> str_extract
data$coordinates <- sapply(data$gps,
function(x) str_extract(x,"-[0-9]+.[0-9]+,-[0-9]+.[0-9]+"))
# [0-9]{1,2} uno o digitos
# @-1.15,-74.155$%&//5
#------ 4.0 str_match ---------
# Extraer una seccion del texto sin especificar la forma completa del texto
# python search <> str_match
x <- "dada--dss kks. 12434 distrito  San damian   region Huarochiri"
str_match(x,"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")
# \\d*: ninguna, uno o mas ocurrencias
# \\d+: uno o mas ocurrencias
#\\.* : captura ninguna, una, o mas de un caracter (cualquiera: espacios, letras, numeros, #!%&/())
# () permite capturar lo que me interesa
str_match(x,"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")[2] # distrito
str_match(x,"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")[3]  # region
# Usando dplyr
# rowwise permite aplicar operaciones fila por fila
data <- data |> rowwise() |>
mutate(distrito_var = str_match( dirección ,
"[D/d]istrito ([\\w+\\s\\-]+) [R/r]egion ([\\w+\\s]+)")[2],
region_var = str_match( dirección ,
"[D/d]istrito ([\\w+\\s]+) [R/r]egion ([\\w+\\s]+)")[3]
) |> ungroup()
# ungroup () desactiva el rowwise()
View(data[,c('dirección','region_var',"distrito_var")])
#extraccion del numero telefonico
#telf: 123-4559
data$telefono_fijo <- sapply(data$telefono,
function(x) str_match(x,"(\\d+\\-\\d+)")[2])
# Extraer seccion de un texto cuando se tiene que especificar toda la estrucutra del texto
match_output <- stringr::str_match(data$resolucion,
'(\\d+)-([0-9]+)\\s([A-Z]+)')
# DS-54-2015 PCM
# pip str_match , stringr, str_match
"[0-9]+: existe uno o mas digitos"
data <- data %>% mutate(code_res = match_output[,2], year_res = match_output[,3],
entidad_res = match_output[,4])
# Regex que detecte un patron y crear dummies
# str_detect es un bool variable (True , False). Coloca True si el texto contiene el patron.
data <- data %>% mutate(code_res = match_output[,2], year_res = match_output[,3],
entidad_res = match_output[,4],
dGobreg = ifelse(str_detect(institución_ruc,"(^G)|(^R)"), 1 , 0 ),
dMinsa = ifelse(str_detect(institución_ruc,"^M"), 1 , 0 )
)
#----- Look around ------------
correo <- "rmendozam31@gmail.com"
str_match(correo, "(\\w+)\\@.*")
"Horarios de apertura"
# positive lookahead (?=)
# "aperuta 8:30:20:01:05 am, cierre 16:00pm"
data$apertura1 <- sapply(data$horario,
function(x) str_extract(x,"\\d+\\:\\d+(?= am)"))
data$apertura2 <- sapply(data$horario,
function(x) str_extract(x,"[\\d+\\:]+(?= am)"))
# positive lookbehind (?<=)
data$apertura3 <- sapply(data$horario,
function(x) str_extract(x,"(?<=apertura )[\\d+\\:]+"))
# usando Pips ( |>  y  %>% )
data$apertura3 <- data$horario |> str_extract("[\\d+\\:]+(?= am)")
data$apertura4 <- data$horario |> str_extract("(?<=apertura )[\\d+\\:]+")
data$apertura5 <- data$horario %>%  str_extract("[\\d+\\:]+(?= am)")
data$apertura6 <- data$horario %>%  str_extract("(?<=apertura )[\\d+\\:]+")
"Horarios de cierre"
# negative lookbehind (?<!)
data$cierre1 <- data$horario |> str_extract("(?<!apertura )\\d+\\:\\d+")
# negative lookbahead (?!)
data$pre_soles1 <- data$presupuesto |> str_extract("[\\d+\\,]+(?!\\$)")
View(data[,c("presupuesto","pre_soles1")])
# retirar tildes
data$presupuesto <- stri_trans_general(str = data$presupuesto, id = "Latin-ASCII")
# ---------------- Fechas en R -----------------
data$fecha_apertura_format <-  as.Date(data$fecha_apertura,format='%d/%m/%Y')
#date un different columns
data$year = as.numeric(format(data$fecha_apertura_format ,"%Y"))
data$month = as.numeric(format(data$fecha_apertura_format ,"%m"))
data$day = as.numeric(format(data$fecha_apertura_format ,"%d"))
# crear nueva variables de fecha (libreria Lubridate)
data <- data |> dplyr::mutate(
date = dmy( fecha_apertura  )
)
# diferencia entre paste y paste0, paste0 une sin espacio
# mientras paste permite indicar como separar los strings
data$year <- NULL
junin_data = read_excel("../../data/Region_Junin.xlsx")
newbase <- dplyr::filter(junin_data, grepl('AC', District))
newbase <- dplyr::filter(junin_data, grepl('pacha', Place))
# ignore.case=TRUE: ignora mayuscula o minuscula (upper or lower case)
newbase <- junin_data %>% filter(grepl('pacha', Place, ignore.case=TRUE))
newbase <- junin_data %>% filter(grepl('CIUDAD', District, ignore.case=TRUE))
newbase <- junin_data %>% filter(grepl('^hu', District, ignore.case=TRUE))
# Ending word
newbase <- junin_data %>% filter(grepl('ro$', Place, ignore.case=TRUE))
newbase <-  junin_data %>% filter(grepl('^ac*', Place, ignore.case=TRUE))
# match : a , c , ac
newbase <-  junin_data %>% filter(grepl('^ac+', Place, ignore.case=TRUE))
# match : ac (strict)
