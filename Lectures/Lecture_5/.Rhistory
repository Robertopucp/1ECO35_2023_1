# Library ####
#install.packages("pacman")
library(pacman)
# permite llamar a varias librerias de manera simultánea
# Si la librería no está instalada, entonces lo instala y llama para su uso
p_load(dplyr, readxl, tidyverse, foreign, datos)
# tidyverse es una recopilación de varias librerias (dply, ggplot, stringr, etc)
# foreign, libreria que permite leer base de datos de diferentes extensiones
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Load datasets ----------------------
# csv (comma separated values)
datoscsv <- read.csv("../../data/Riesgo_morosidad.csv")
# punto y coma separa los datos
datoscsv <- read.csv("../../data/Riesgo_morosidad.csv", sep = ";")
# read.csv(file, header = TRUE, sep = ",", quote = "\"",
#          dec = ".", fill = TRUE, comment.char = "", ...
str(datoscsv)
# Variables categoricas
datoscsv$sexo      <- factor(datoscsv$sexo, levels = c(1, 2),
labels = c("Masculino", "Femenino"))
datoscsv$morosidad <- factor(datoscsv$morosidad, levels = c(1,2),
labels = c("No moroso", "Moroso"))
# factor (variable, niveles, etiquetas labels )
levels(datoscsv$sexo)
levels(datoscsv$sexo) <- c("M","F")
datoscsv$fonopart  <- factor(datoscsv$fonopart, levels = c(1, 2),
labels = c("No", "Si"))
datoscsv$fonolab   <- factor(datoscsv$fonolab, levels = c(1, 2),
labels = c("No", "Si"))
datoscsv$autovaluo <- factor(datoscsv$autovaluo, levels = c(1, 2),
labels = c("No", "Si"))
datoscsv$esaval    <- factor(datoscsv$esaval, levels = c(1, 2),
labels = c("No", "Si"))
datoscsv$tieneaval <- factor(datoscsv$tieneaval, levels = c(1, 2),
labels = c("No", "Si"))
datoscsv$tiporenta <- factor(datoscsv$tiporenta, levels = c(2, 3),
labels = c("Fijo", "Variable"))
datoscsv$dpto      <- factor(datoscsv$dpto,
levels = c(1, 2, 3, 4, 5, 6),
labels = c("Lima", "Trujillo", "Arequipa",
"Cusco", "Ica", "Piura"))
# datoscsv$morosidad <- factor(datoscsv$morosidad, levels = c(1, 2),
#                              labels = c("No Moroso", "Moroso"))
str(datoscsv)
# Tabla cruzada
table(datoscsv$dpto, datoscsv$morosidad)
table(datoscsv$morosidad, datoscsv$dpto)
# table morosidad y tipo de renta
# morosidad 1: no moroso,
# morosidad 2: moroso
#### 1.1 Datos *.TXT ####
datost <- read.table("../../data/Riesgo_morosidad.dat",
sep = "\t", header = F)
# primera fila como nombre de las columnas
datost <- read.table("../../data/Riesgo_morosidad.dat",
sep = "\t",
header = T)
str(datost)
# read.table() puede leer archivos *.csv
datoscsv2 <- read.table("../../data/Riesgo_morosidad.csv",
sep = ";",
header = T)
str(datoscsv2)
# Uso read.delim para la lectura de datos delimitados
# En este caso los datos estan delimitados por tab \t
datosd <- read.delim("../../data/Riesgo_morosidad.dat",
sep = "\t",
header = TRUE)
str(datosd)
#### 1.2 Datos SPSS *.sav ####
# read.spss de la libreria foreign
# permite asignar las etiquetas como datos
value_label <- read.spss("../../data/Riesgo_morosidad.sav"
)
# etiqueta de valores
attributes(value_label)$label.table
# load dataset as datafrmae
datospss <- read.spss("../../data/Riesgo_morosidad.sav",
use.value.labels = F,
to.data.frame = TRUE)
attributes(datospss)$variable.labels  # etiqueta de variable
# encoding: detectar el tipo de numero y letras
#### 1.3 Datos EXCEL *.XLS *.XLSX ####
datos1_xls  <- read_excel("../../data/Riesgo_morosidad.xls")
datos2_xls  <- read_xls("../../data/Riesgo_morosidad.xls")
datos1_xlsx <- read_excel("../../data/Riesgo_morosidad.xlsx")
datos2_xlsx <- read_xlsx("../../data/Riesgo_morosidad.xlsx")
str(datos1_xlsx)
str(datos1_xls)
datos1_xlsx <- as.data.frame(datos1_xlsx)
str(datos1_xlsx)
# Lectura de caracteres especiales
# UTF-8 es el encoding universal
netflix <- read.csv("../../data/netflix_titles.csv")
netflix <- read.csv("../../data/netflix_titles.csv", encoding = "UTF-8")
netflix <- read.csv("../../data/netflix_titles.csv", encoding = "UTF-8",
na.strings=c("",NA))
# NA
# na.strings=c("",NA) reemplaza vacios en las variables character (texto) por missing
#--------------------------------------------#
bbdd <- paises # dataset from "datos" library
write.csv(bbdd, "../../data/paises.csv", row.names = F)
################  laboratorio 5 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
# permite llamar a varias librerias de manera simultánea
# Si la librería no está instalada, entonces lo instala y llama para su uso
p_load(readxl, tidyverse, foreign,fastDummies, haven, survey,
srvyr, labelled)
# tidyverse es una recopilación de varias librerias (dply, ggplot, stringr, etc)
# foreign, libreria que permite leer base de datos de diferentes extensiones
# haven tambien permite la lectura de base de datos de diferentes extensiones (i.e stata)
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Merge datasets ----------------------------
df1 <- data.frame(
id = 1:5,
color = c("red", "blue", "green", NA, "red"),
size = c("small", "large", "medium", "medium", "small"),
type = c("A", "B", "C", NA, "A")
)
df2 <- data.frame(
id = c(2,3,4,10,20,30),
value = c(1000, 2000, 3000,4000,5000,6000)
)
# Elijo mi MASTER data
df1 |>
full_join(df2, by = "id")
df1 |>
inner_join(df2, by = "id")
data <- df1 |>
left_join(df2, by = "id")
### Dummies -------------------------------------
# creación de Dummies y missing #
data$dummy <- ifelse(data$value > 1500, 1, 0)
# Cuando alguna de las variables del condicional es missing
# la dummy toma el valor NA  ( Esto es diferente en python y stata )
### Merge ENAHO ------------------------------
enaho100_19 <- read_dta("../../data/enaho/enaho01-2019-100.dta")
enaho200_19 <- read_dta("../../data/enaho/enaho01-2019-200.dta")
enaho300_19 <- read_dta("../../data/enaho/enaho01a-2019-300.dta")
enaho400_19 <- read_dta("../../data/enaho/enaho01a-2019-400.dta")
enaho500_19 <- read_dta("../../data/enaho/enaho01a-2019-500.dta")
sumaria_19 <- read_dta("../../data/enaho/sumaria-2019.dta")
sumaria_20 <- read_dta("../../data/enaho/sumaria-2020.dta")
sumaria_18 <- read_dta("../../data/enaho/sumaria-2018.dta")
base_deflactores <- read_dta("../../data/enaho/deflactores_base2020_new.dta")
# Elegimos nuestro Master data
enaho19 <- enaho200_19 %>%
full_join(enaho500_19, by = c("conglome","vivienda","hogar","codperso"))
enaho19 <- enaho200_19 %>%
inner_join(enaho500_19, by = c("conglome","vivienda","hogar","codperso"))
enaho19 <- enaho200_19 %>%
left_join(enaho500_19, by = c("conglome","vivienda","hogar","codperso"))
enaho19 <- enaho200_19 %>%
left_join(enaho300_19, by = c("conglome","vivienda","hogar","codperso")) %>%
left_join(enaho400_19, by = c("conglome","vivienda","hogar","codperso")) %>%
left_join(enaho500_19, by = c("conglome","vivienda","hogar","codperso")) %>%
left_join(enaho100_19, by = c("conglome","vivienda","hogar")) %>%
left_join(sumaria_19, by = c("conglome","vivienda","hogar"))
table(enaho19$p300a)
names(enaho19)
attr(enaho19$p300a, 'labels')
attr(enaho19$p301a, 'label')
attr(enaho19$pobreza, 'labels')
lapply(enaho19, attr, 'labels')
lapply(enaho19, attr, 'label')
#-----------------------------------------------#
### Uso de case_when -------------------------------------------
enaho19$lengua <- case_when(
enaho19$p300a == 4 ~ 1,
enaho19$p300a < 4 ~ 2,
enaho19$p300a > 5 ~ 3
)
# siempre hacer cruce de variables para verificar que el proceso sea el correcto
# frecuencia relativa por columna
table(enaho19$p300a, enaho19$lengua)
prop.table(table(enaho19$p300a, enaho19$lengua), margin = 2)
# Creación de la variable area 1 : urbano y 2 para rural
enaho19$area <- case_when(
enaho19$estrato <= 5 ~ 1,
enaho19$estrato > 5 ~ 2
)
# años de educación #
# años de estudio acumulado hasta el nivel educativo alcanzado
enaho19 <- enaho19 %>% mutate(
educ1 = case_when(
between(p301a,1,4) ~ 0,
between(p301a,5,6) ~ 6,
between(p301a,7,10) ~ 11,
p301a == 11 ~ 16
))
# Años de estudio en el nivel educativo actual
# Sumamos el grado o año de estudios. Grado para secundaria o primaria
# año de estudio para educación superior
enaho19$educ2 <- apply(enaho19[,c("p301b","p301c")], 1 , sum , na.rm = T)
enaho19$years_educ <- apply(enaho19[,c("educ1","educ2")], 1 , sum , na.rm = T)
# margin = 1 para sumar fila por fila (suma horizontal)
# na.rm ignora los missing
# otra alternatica
enaho19 <- enaho19 %>% mutate(
educ1 = case_when(
between(p301a,1,4) ~ 0,
between(p301a,5,6) ~ 6,
between(p301a,7,10) ~ 11,
p301a == 11 ~ 16
)
) %>% rowwise() %>%  # row (fila), se realizará operaciones fila por fila
mutate(
educ2 = sum(p301b, p301c, na.rm = T),  # suma horizontal
years_educ = sum(educ1, educ2, na.rm = T)
) %>%
ungroup()  # resactivar rowwise()
### Dummies de educación ----------------------------------------------
# Crear dummies por cada anivel educativo
enaho19 <- dummy_cols(enaho19, select_columns = 'p301a')
enaho19$p301a_NA <- NULL
# Variables de pobreza #
enaho19 <- enaho19 %>%
mutate(dpto_code = substr(ubigeo, 1, 2),
ubigeo3 = str_pad(ubigeo2, 6, pad ="0"),
dpto = case_when(
dpto_code == "01" ~ "Amazonas", dpto_code == "02" ~ "Ancash",
dpto_code == "03" ~ "Apurimac", dpto_code == "04" ~ "Arequipa",
dpto_code == "05" ~ "Ayacucho", dpto_code == "06" ~ "Cajamarca",
dpto_code == "07" ~ "Callao"  , dpto_code == "08" ~ "Cusco",
dpto_code == "09" ~ "Huancavelica",dpto_code == "10" ~ "Huanuco",
dpto_code == "11" ~ "Ica"     , dpto_code == "12" ~ "Junin",
dpto_code == "13" ~ "La Libertad",dpto_code == "14" ~ "Lambayaque",
dpto_code == "15" ~ "Lima"    , dpto_code == "16" ~ "Loreto",
dpto_code == "17" ~ "Madre de Dios",dpto_code == "18" ~ "Moquegua",
dpto_code == "19" ~ "Pasco"   ,dpto_code == "20" ~ "Piura",
dpto_code == "21" ~ "Puno"    ,dpto_code == "22" ~ "San Martin",
dpto_code == "23" ~ "Tacna"   ,dpto_code == "24" ~ "Tumbes",
dpto_code == "25" ~ "Ucayali"
),
gmensual_pc = gashog2d/(mieperho*12),  # gasto del hogar mensual percapita
imensual_pc = inghog1d/(mieperho*12)   # ingreso del hogar percapita
)
# Variable binaria de pobreza: pobre y no pobre #
enaho19$dummy_pobre <- ifelse(enaho19$pobreza %in% c(1,2), 1, 0)
# var label
var_label(enaho19) <- list(dummy_pobre = "Dummy de pobreza")
# value labels
val_labels(enaho19$dummy_pobre) <- c("Hogar pobre" = 0,
"Hogar no pobre" = 1)
val_labels(enaho19$area) <- c("Urbano" = 0,
"Rural" = 1)
enaho19$dummy_pobre <- ifelse(enaho19$pobreza %in% c(1,2), 1, 0)
# Tasa de pobreza a nivel región usando la libreria survey
# Survey design --------------------------------
# primero se declara el diseño muestral de la encuesta
enaho19$factorpob <- round(enaho19$factor07*enaho19$mieperho, 1)
data_ind <- enaho19  %>%
as_survey_design(ids = conglome,
strata = estrato,
weight = factorpob) %>%
dplyr::group_by(dpto) %>%
summarise(
poverty_rate = survey_mean(dummy_pobre, na.rm = T)*100
)
# Uso de groupby
enaho19  %>%  group_by(dpto) %>%
summarise(
poverty_rate = mean(dummy_pobre, na.rm = T)*100
) %>% as.data.frame()
# Uso de libreria survey #
# tabla de frecuencia relativa
# Diseño de la encuesta
design <- svydesign(
data = enaho19,
ids = ~ conglome,
strata = ~estrato,
weights = ~ factorpob,
nest = TRUE
)
### tabla de frecuencia -------------------------------------
prop.table(svytable(~ dpto + dummy_pobre, design = design), 1)
### Trabajo infantil y adolescente --------------------------------------
# ifelse coloca missing si alguna de las variables de la condicional es NA
# Esto es diferente en Python
enaho19 <- enaho19 %>%
mutate(
dchildwork = ifelse(
between(p208a,5,17) & (p210 == 1 | (p210 == 2 & (! t211 %in% c(9,11)))),
1, ifelse( between(p208a,5,17), 0 , NA) ) ,
dmujer = ifelse(p207== 1, 0, 1)
)
# label de la variable dummy di el menor de edad labora
val_labels(enaho19$dchildwork) <- c("No trabajo" = 0,
"Trabaja" = 1)
design <- svydesign(
data = enaho19,
ids = ~ conglome,
strata = ~estrato,
weights = ~ factorpob,
nest = TRUE
)
# area 1 (urbano), 2 (rural)
prop.table(svytable(~ area + dchildwork, design = design), 1)
prop.table(svytable(~ dmujer + dchildwork, design = design), 1)
prop.table(svytable(~ dpto + dchildwork, design = design), 1) %>%
as.data.frame() %>%
filter(dchildwork == 1) %>%
mutate(ratechildw = Freq*100) %>%
ggplot(aes(y = reorder( dpto, -ratechildw) , x = ratechildw   )) +
geom_col() +
scale_fill_identity(guide = "none") +
theme_minimal()+
xlab("")+
ylab("Department")
# Append --------------------------------
# Append sumaria y merge con los deflactores anuales.
# El año base es 2020
append_enaho <- bind_rows(sumaria_18, sumaria_19, sumaria_20) %>%
mutate(  dpto = as.numeric( substr(ubigeo,1,2) ),
año = as.numeric(año)
)
# Asignamos el código de Lima metropolitana al Callao
append_enaho$dpto[ append_enaho$dpto == 7 ] <- 15
append_enaho <- left_join(append_enaho,
base_deflactores, by = c("dpto", "año" = "aniorec"))
# Factor de expansión a nivel persona
append_enaho$factorpob <-  round(append_enaho$factor07*append_enaho$mieperho, 1)
# Uniendo con la base deflactores
append_enaho <- append_enaho %>%
mutate(
area =  factor(case_when(
estrato <= 5 ~ 1,
estrato > 5 ~ 2  ), levels = c(1,2), labels = c("Urbano", "Rural")),
ingmpc = inghog1d/(mieperho*12*i00),
factorpob = round(factor07*mieperho, 1)
)
income_years <- append_enaho %>%
as_survey_design(ids = conglome,
strata = estrato,
weight = factorpob) %>%
group_by(año, area) %>%
summarise(
ingmpc = survey_mean(ingmpc, na.rm = T),
ingmpc = survey_sd(ingmpc, na.rm = T)
)
income_years <- append_enaho %>%
as_survey_design(ids = conglome,
strata = estrato,
weight = factorpob) %>%
group_by(año, area) %>%
summarise(
ingmpc = survey_mean(ingmpc, na.rm = T),
ingmpc = sd(ingmpc, na.rm = T)
)
income_years <- append_enaho %>%
as_survey_design(ids = conglome,
strata = estrato,
weight = factorpob) %>%
group_by(año, area) %>%
summarise(
ingmpc = survey_mean(ingmpc, na.rm = T),
ingmpc_sd = sd(ingmpc, na.rm = T)
)
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
geom_errorbar(aes(ymin=ingmpc -ingmpc_sd, ymax = ingmpc + ingmpc_sd),
width=.04) +
theme_bw() +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
geom_errorbar(aes(ymin=ingmpc -ingmpc_sd, ymax = ingmpc + ingmpc_sd),
width=.04) +
theme_bw() +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years <- append_enaho %>%
as_survey_design(ids = conglome,
strata = estrato,
weight = factorpob) %>%
group_by(año, area) %>%
summarise(
ingmpc = survey_mean(ingmpc, na.rm = T),
ingmpc_sd = SE(ingmpc, na.rm = T)
)
income_years <- append_enaho %>%
as_survey_design(ids = conglome,
strata = estrato,
weight = factorpob) %>%
group_by(año, area) %>%
summarise(
ingmpc = survey_mean(ingmpc, na.rm = T)
)
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
geom_errorbar(aes(ymin=ingmpc -ingmpc_se, ymax = ingmpc + ingmpc_se),
width=.04) +
theme_bw() +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
geom_errorbar(aes(ymin=ingmpc -ingmpc_se, ymax = ingmpc + ingmpc_se),
width=.04) +
theme_bw() +
scale_x_continuous(expand = expansion(0)) +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
geom_errorbar(aes(ymin=ingmpc -ingmpc_se, ymax = ingmpc + ingmpc_se),
width=.04) +
theme_bw() +
scale_x_continuous(2018,2019,2020) +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
geom_errorbar(aes(ymin=ingmpc -ingmpc_se, ymax = ingmpc + ingmpc_se),
width=.04) +
theme_bw() +
scale_x_continuous(2018,2019,2020, expand = expansion(0) +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
income_years <- append_enaho %>%
as_survey_design(ids = conglome,
strata = estrato,
weight = factorpob) %>%
group_by(año, area) %>%
summarise(
ingmpc = survey_mean(ingmpc, na.rm = T)
)
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
geom_errorbar(aes(ymin=ingmpc -ingmpc_se, ymax = ingmpc + ingmpc_se),
width=.04) +
theme_bw() +
scale_x_continuous(2018,2019,2020) +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
theme_bw() +
scale_x_continuous(2018,2019,2020) +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
theme_bw() +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
theme_bw() +
scale_y_continuous(expand = c(2018,2019, 2020))+
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
theme_bw() +
scale_x_continuous(expand = c(2018,2019, 2020)) +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
theme_bw() +
scale_x_continuous( c(2018,2019, 2020) ) +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
income_years %>% ggplot( aes(x = año, y = ingmpc, group = area, colour = area) ) +
geom_line()+
geom_point() +
theme_bw() +
scale_x_continuous(breaks = c(2018, 2019 , 2020) ) +
ggtitle("Average monthly income percapita by area")+
xlab("")+
ylab("")
