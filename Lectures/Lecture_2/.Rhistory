} else if (imc >= 18.5 & imc < 25) {
resultado$clasificacion <- "Normal"
} else if (imc >= 25 & imc < 30) {
resultado$clasificacion <- "Sobrepeso"
} else {
resultado$clasificacion <- "Obesidad"
}
# Devolvemos el objeto con los resultados
return(resultado)
}
estudiante1 <- calcular_imc(peso = 70, talla = 1.5)
estudiante2 <- calcular_imc(peso = 85, talla = 1.8)
estudiante3 <- calcular_imc(peso = 50, talla = 1.6)
calcular_imc <- function(peso, talla) {
imc <- peso / (talla^2)
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc < 25) {
clasificacion <- "Normal"
} else if (imc < 30) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
resultado <- list(imc = imc, clasificacion = clasificacion)
return(resultado)
}
calcular_imc(70, 1.75)
calcular_imc <- function(peso, talla) {
imc <- peso / (talla^2)
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc < 25) {
clasificacion <- "Normal"
} else if (imc < 30) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
resultado <- list(imc = imc, clasificacion = clasificacion)
return(resultado)
}
calcular_imc <- function(peso, talla) {
imc <- peso / (talla^2)
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc < 25) {
clasificacion <- "Normal"
} else if (imc < 30) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
resultado <- list(imc = imc, clasificacion = clasificacion)
return(resultado)
}
calcular_imc(70, 1.75)
calcular_imc <- function(peso, talla) {
imc <- peso / (talla^2)
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc < 25) {
clasificacion <- "Normal"
} else if (imc < 30) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
resultado <- list(imc = imc, clasificacion = clasificacion)
return(resultado)
}
calcular_imc(70, 1.75)
calcular_imc <- function(peso, talla) {
imc <- peso / (talla^2)
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc < 25) {
clasificacion <- "Normal"
} else if (imc < 30) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
resultado <- list(imc = imc, clasificacion = clasificacion)
return(resultado)
}
calcular_imc(70, 1.75)
calcular_imc <- function(peso, talla) {
imc <- peso / (talla^2)
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc < 25) {
clasificacion <- "Normal"
} else if (imc < 30) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
resultado <- list(imc = imc, clasificacion = clasificacion)
return(resultado)
}
calcular_imc(70, 1.75)
calcular_imc( 70, 1.75 )
calcular_imc <- function(peso, talla) {
imc <- peso / (talla^2)
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc < 25) {
clasificacion <- "Normal"
} else if (imc < 30) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
resultado <- list(imc = imc, clasificacion = clasificacion)
return(resultado)
}
calcular_imc(70, 1.75)
calcular_imc(70, 1.75)
calcular_imc <- function(peso, talla) {
imc <- peso / (talla^2)
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc < 25) {
clasificacion <- "Normal"
} else if (imc < 30) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
resultado <- list(imc = imc, clasificacion = clasificacion)
return(resultado)
}
calcular_imc(70, 1.75)
calcular_imc <- function(peso, talla) {
imc <- peso / (talla^2)
if (imc < 18.5) {
clasificacion <- "Bajo peso"
} else if (imc < 25) {
clasificacion <- "Normal"
} else if (imc < 30) {
clasificacion <- "Sobrepeso"
} else {
clasificacion <- "Obesidad"
}
resultado <- list(imc = imc, clasificacion = clasificacion)
return(resultado)
}
calcular_imc(70, 1.75)
calcular_imc <- function(peso, talla) {
# Calculamos el IMC
imc <- peso / talla^2
# Creamos un objeto con los resultados
resultado <- list(
peso = peso,
talla = talla,
imc = imc,
clasificacion = NA
)
# Asignamos la clasificación según la tabla de IMC
if (imc < 18.5) {
resultado$clasificacion <- "Bajo peso"
} else if (imc >= 18.5 & imc < 25) {
resultado$clasificacion <- "Normal"
} else if (imc >= 25 & imc < 30) {
resultado$clasificacion <- "Sobrepeso"
} else {
resultado$clasificacion <- "Obesidad"
}
# Devolvemos el objeto con los resultados
return(resultado)
}
calcular_imc(70,1.5)
calcular_imc <- function(peso, talla) {
# Calculamos el IMC
imc <- peso / talla^2
# Creamos un objeto con los resultados
resultado <- list(
peso = peso,
talla = talla,
imc = imc,
clasificacion = NA
)
# Asignamos la clasificación según la tabla de IMC
if (imc < 18.5) {
resultado$clasificacion <- "Bajo peso"
} else if (imc >= 18.5 & imc < 25) {
resultado$clasificacion <- "Normal"
} else if (imc >= 25 & imc < 30) {
resultado$clasificacion <- "Sobrepeso"
} else {
resultado$clasificacion <- "Obesidad"
}
# Devolvemos el objeto con los resultados
return(resultado)
}
calcular_imc(70,1.5)
source("C:/Users/nmiyamoto/Documents/GitHub/1ECO35_2023_1/Labs/tarea2/Grupo_3_r.R")
getwd()
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
getwd()
getwd()
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
View(portfolio)
View(portfolio)
View(portfolio)
calcular_coeficiente_varianza <- function(rend_x, rend_y, w_x, w_y) {
# Calcular el coeficiente de Pearson
coef_pearson <- cor(rend_x, rend_y)
# Paso 2: Crear una función para calcular el coeficiente de Pearson y la varianza del portafolio
calcular_coeficiente_varianza <- function(rend_x, rend_y, w_x, w_y) {
# Calcular el coeficiente de Pearson
coef_pearson <- cor(rend_x, rend_y)
# Calcular la varianza del portafolio
var_portafolio <- w_x^2 * var(rend_x) + w_y^2 * var(rend_y) + 2 * w_x * w_y * cov(rend_x, rend_y)
# Retornar el coeficiente de Pearson y la varianza del portafolio en un vector
return(c(coef_pearson, var_portafolio))
}
# Paso 2: Crear una función para calcular el coeficiente de Pearson y la varianza del portafolio
calcular_coeficiente_varianza <- function(rend_x, rend_y, w_x, w_y) {
# Calcular el coeficiente de Pearson
coef_pearson <- cor(rend_x, rend_y)
# Calcular la varianza del portafolio
var_portafolio <- w_x^2 * var(rend_x) + w_y^2 * var(rend_y) + 2 * w_x * w_y * cov(rend_x, rend_y)
# Retornar el coeficiente de Pearson y la varianza del portafolio en un vector
return(c(coef_pearson, var_portafolio))
}
# Paso 3: Aplicar la función a los rendimientos de los activos X e Y de la base de datos portfolio, con los pesos w_x=0.2 y w_y=0.8.
rend_x <- portfolio$X
rend_y <- portfolio$Y
w_x <- 0.2
w_y <- 0.8
resultado <- calcular_coeficiente_varianza(rend_x, rend_y, w_x, w_y)
coef_pearson <- resultado[1]
var_portafolio <- resultado[2]
# Imprimir los resultados
cat("El coeficiente de Pearson entre los activos X e Y es:", coef_pearson, "\n")
cat("La varianza del portafolio es:", var_portafolio, "\n")
# definir la función que calcula el coeficiente de correlación de Pearson y la varianza del portafolio
calcular_coeficiente_varianza <- function(x, y, wx, wy) {
# calcular la covarianza
cov_xy <- cov(x, y)
# calcular la varianza
var_x <- var(x)
var_y <- var(y)
# calcular el coeficiente de correlación de Pearson
coef_correlacion <- cov_xy / (sqrt(var_x) * sqrt(var_y))
# calcular la varianza del portafolio
var_portafolio <- wx^2 * var_x + wy^2 * var_y + 2 * wx * wy * cov_xy
# devolver los resultados
resultado <- list(coeficiente_correlacion = coef_correlacion,
varianza_portafolio = var_portafolio)
return(resultado)
}
# aplicar la función con los datos de la base de datos
resultado <- calcular_coeficiente_varianza(portfolio$X, portfolio$Y, 0.2, 0.8)
# imprimir los resultados
cat("Coeficiente de correlación de Pearson:", resultado$coeficiente_correlacion, "\n")
cat("Varianza del portafolio:", resultado$varianza_portafolio, "\n")
# definir la función que calcula el coeficiente de correlación de Pearson y la varianza del portafolio
calcular_coeficiente_varianza <- function(x, y, wx, wy) {
# calcular la covarianza
cov_xy <- cov(x, y)
# calcular la varianza
var_x <- var(x)
var_y <- var(y)
# calcular el coeficiente de correlación de Pearson
coef_correlacion <- cov_xy / (sqrt(var_x) * sqrt(var_y))
# calcular la varianza del portafolio
var_portfolio <- wx^2 * var_x + wy^2 * var_y + 2 * wx * wy * cov_xy
# devolver los resultados
resultado <- list(coeficiente_correlacion = coef_correlacion,
varianza_portfolio = var_portfolio)
return(resultado)
}
# aplicar la función con los datos de la base de datos
resultado <- calcular_coeficiente_varianza(portfolio$X, portfolio$Y, 0.2, 0.8)
# imprimir los resultados
cat("Coeficiente de correlación de Pearson:", resultado$coeficiente_correlacion, "\n")
cat("Varianza del portafolio:", resultado$varianza_portfolio, "\n")
getwd()
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
# definir la función que calcula el coeficiente de correlación de Pearson y la varianza del portafolio
calcular_coeficiente_varianza <- function(x, y, wx, wy) {
# calcular la covarianza
cov_xy <- cov(x, y)
# calcular la varianza
var_x <- var(x)
var_y <- var(y)
# calcular el coeficiente de correlación de Pearson
coef_correlacion <- cov_xy / (sqrt(var_x) * sqrt(var_y))
# calcular la varianza del portafolio
var_portfolio <- wx^2 * var_x + wy^2 * var_y + 2 * wx * wy * cov_xy
# devolver los resultados
resultado <- list(coeficiente_correlacion = coef_correlacion,
varianza_portfolio = var_portfolio)
return(resultado)
}
# aplicar la función con los datos de la base de datos
resultado <- calcular_coeficiente_varianza(portfolio$X, portfolio$Y, 0.2, 0.8)
# imprimir los resultados
cat("Coeficiente de correlación de Pearson:", resultado$coeficiente_correlacion, "\n")
cat("Varianza del portafolio:", resultado$varianza_portfolio, "\n")
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
getwd()
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
# cargar la base de datos portfolio
data(portfolio)
# extraer los rendimientos de X e Y
x <- portfolio$X
y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(x, y)[1, 2]
# calcular la varianza de X e Y
var_x <- var(x)
var_y <- var(y)
# calcular el coeficiente de Pearson
corr_xy <- cov_xy / (sqrt(var_x) * sqrt(var_y))
# calcular la varianza del portafolio
w_x <- 0.2
w_y <- 0.8
var_portfolio <- w_x^2 * var_x + w_y^2 * var_y + 2 * w_x * w_y * cov_xy
# mostrar los resultados
cat("Coeficiente de Pearson: ", corr_xy, "\n")
cat("Varianza del portafolio: ", var_portfolio, "\n")
getwd()
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
getwd()
getwd()
getwd()
install.packages("readxl")
install.packages("readxl")
View(portfolio)
View(portfolio)
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
library(readxl)
portfolio <- read_excel("data/Portafolio.xlsx")
getwd()
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
View(portfolio)
getwd()
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
install.packages("readxl")
library(readxl)
portfolio <- read_excel("data/Portafolio.xlsx")
portfolio <- read_excel("data/Portafolio.xlsx")
# cargar la base de datos portfolio
data(portfolio)
# extraer los rendimientos de X e Y
x <- portfolio$X
y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(x, y)[1, 2]
# extraer los rendimientos de X e Y
x <- portfolio$X
y <- portfolio$Y
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
# extraer los rendimientos de X e Y
x <- portfolio$X
y <- portfolio$Y
getwd()
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
# extraer los rendimientos de X e Y
x <- portfolio$X
y <- portfolio$Y
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
# extraer los rendimientos de X e Y
rendimientos_x <- portfolio$X
rendimientos_y <- portfolio$Y
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
# extraer los rendimientos de X e Y
rendimientos_x <- portfolio$X
rendimientos_y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(x, y)[1, 2]
# extraer los rendimientos de X e Y
rendimientos_x <- portfolio$X
rendimientos_y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(rendimientos_x, rendimientos_y)[1, 2]
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
# extraer los rendimientos de X e Y
rendimientos_x <- portfolio$X
rendimientos_y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(rendimientos_x, rendimientos_y)[1, 2]
# extraer los rendimientos de X e Y
rendimientos_x <- portfolio$X
rendimientos_y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(rendimientos_x, rendimientos_y)[1, 2]
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
# extraer los rendimientos de X e Y
rendimientos_x <- portfolio$X
rendimientos_y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(rendimientos_x, rendimientos_y)[1, 2]
# extraer los rendimientos de X e Y
rendimientos_x <- portfolio$X
rendimientos_y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(rendimientos_x, rendimientos_y)[1, 2]
library(readxl)
library(dplyr)
library(rstudioapi) # set working directory to file location
# alternativa para subir librerias
library(pacman)  # Package Manager
p_load(dplyr, readxl, rstudioapi)
install.packages("dplyr")
install.packages("readxl")
install.packages("pacman")
install.packages("pacman")
install.packages("dplyr")
library(readxl)
library(dplyr)
library(rstudioapi) # set working directory to file location
# alternativa para subir librerias
library(pacman)  # Package Manager
p_load(dplyr, readxl, rstudioapi)
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
# extraer los rendimientos de X e Y
rendimientos_x <- portfolio$X
rendimientos_y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(rendimientos_x, rendimientos_y)[1, 2]
## Mediante este comando, visualizamos que archivos hay en el lugar donde nos encontramos
list.files()
getwd()
## Mediante este comando, visualizamos que archivos hay en el lugar donde nos encontramos
list.files()
## Definimos el directorio deseado.
## Debe cambiar esto para que el código corra
setwd("C:/Users/nmiyamoto/Documents/GitHub/1ECO35_2023_1/Lectures/Lecture_2")
## Mediante este comando, visualizamos que archivos hay en el lugar donde nos encontramos
list.files()
## Definimos el directorio deseado.
## Debe cambiar esto para que el código corra
setwd("C:/Users/nmiyamoto/Documents/GitHub/1ECO35_2023_1/Lectures/Lecture_2")
## Extraemos el documento donde se encuentran los datos que usaremos de input en la función
## Debe cambiar esto para que el código corra
portfolio <- read.csv("../data/Portafolio.csv", encoding = "UTF-8") #lo de encodign es para que se pueda ver caracteres latinos
getwd()
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
View(portfolio)
# Calcular la matriz de covarianzas
covarianzas <- cov(portfolio)
# Obtener la covarianza entre X e Y
cov_xy <- covarianzas[1, 2]
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
# extraer los rendimientos de X e Y
rendimientos_x <- portfolio$X
rendimientos_y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(rendimientos_x, rendimientos_y)[1, 2]
# install.packages("dplyr")
# install.packages("readxl")
# install.packages("pacman")
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
library(readxl)
library(dplyr)
library(rstudioapi) # set working directory to file location
# alternativa para subir librerias
library(pacman)  # Package Manager
p_load(dplyr, readxl, rstudioapi)
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
View(portfolio)
# extraer los rendimientos de X e Y
x <- portfolio$X
y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(x, y)[1, 2]
# extraer los rendimientos de X e Y
x <- portfolio$X
y <- portfolio$Y
# calcular la covarianza entre X e Y
cov_xy <- cov(x, y)[0, 1]
# extraer los rendimientos de X e Y
x <- portfolio$X
y <- portfolio$Y
returns <- as.matrix(cbind(x, y))
# calcular la covarianza entre X e Y
cov_xy <- cov(returns)[1, 2]
# calcular la varianza de X e Y
var_x <- var(x)
var_y <- var(y)
# calcular el coeficiente de Pearson
corr_xy <- cov_xy / (sqrt(var_x) * sqrt(var_y))
# calcular la varianza del portafolio
w_x <- 0.2
w_y <- 0.8
var_portfolio <- w_x^2 * var_x + w_y^2 * var_y + 2 * w_x * w_y * cov_xy
# mostrar los resultados
cat("Coeficiente de Pearson: ", corr_xy, "\n")
cat("Varianza del portafolio: ", var_portfolio, "\n")
# Obtener el directorio actual
dir_actual <- getwd()
# Establecer el directorio de trabajo en la carpeta que contiene el archivo Portafolio.csv
setwd("../../data")
# Leer el archivo csv
portfolio <- read.csv("Portafolio.csv", encoding = "UTF-8")
# ... resto del código ...
# Volver al directorio de trabajo original
setwd(dir_actual)
# leer el archivo CSV
portfolio <- read.csv("data/Portafolio.csv", encoding = "UTF-8")
extraer los rendimientos de X e Y
