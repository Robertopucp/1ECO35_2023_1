str_to_lower(string_1)
str_length(string_1)
str_split(string_1, " ")  # (word, pattern )
str_split(string_1, "w")
while (TRUE){
coin <- round( runif(1) )  # redondear al entero más cercano
if (coin == 1) {
break
} else {
print(point)
}
}
#  laboratorio 2 ####
# Curso: Laboratorio de R y Python
# @author: Roberto Mendoza
# -------------------------------------------------------#
## Condicional ----
y <- runif(10,-10,10) # runif( n: cantidad de elementos, inicio , final)
if (mean(y) > 0) {
dummy <- 1
} else {
dummy <- 0
}
print(dummy)
## Nested If statement -----
# v <- 2
# v <- NA
# v <- "String"
v <- TRUE
if  ( is.numeric(v) ){
cat(v, " es un numero entero (no missing)")
} else if ( is.na(v) ) {
cat(v, " es un missing")
} else if ( is.character(v) ){
cat(v, " es un string")
} else if ( is.logical(v) ){
cat(v, " es un Boolean")
} else {
print("Sin resultado")
}
# Loops -----
# -------------------------------------------------------#
#  saving
S <- 1000
# Periods
n <- 10
# interes rate
i <- 0.025
year = 1
while (year < n){
S <-  S*(1+i)
year <-  year + 1
cat( "periodo ", year, ": ", S,"\n")
}
## While + If statement ----
w <- 10
while (w > 7  & w <= 15){
coin <- round( runif(1) )
coin
if (coin == 1) {
w <- w + 2
} else {
w <- w - 10
}
}
print(w)
## For ----
ages<-  c(21, 23, 25, 24, 20)
for (age in ages) {
print(age+10 )
}
## For and Next ----
for (i in 1:50) {
if(i %in% 15:20) { # Ignora los primeros 20 elementos
next
print(i  + 1000)
}
cat("Ejecutanto",i,"\n")
}
## For and Next, break ----
for (j in 1:100){
print(j)
if(j > 20){
break
}
}
## While + break ----
while (TRUE){
coin <- round( runif(1) )  # redondear al entero más cercano
if (coin == 1) {
break
} else {
print(point)
}
}
calculator <- function(x,y,z)
{
result = x*y*z
return(result)
}
calculator( 158, 38, 10 )
calculator( 158, 38)
calculator <- function(x,y,z)
{
result = x*y*z
return(result)
}
calculator( 158, 38, 10 )
calculator_square <- function(x,y){
x2 <- x * x
y2 <- y * y
result <- x2 * y2
return(list(x2,y2,paste0("La multiplicación del cuadrado es:", result)) )
}
calculator_square(3, 4)[1]
calculator_square(3, 4)[[1]] # para ontener el elemento simple
calculator_square_2 <- function(x,y){
x2 <- x * x
y2 <- y * y
result <- x2 * y2
if (200 >= result) {
return( cat( "Large number. Get only the result variable: ", result) )
} else {
return( print( "Too large number. Do not return variables!") )
}
}
w <- 10
while (w > 7  & w <= 15){
coin <- round( runif(1) )
print(coin)
if (coin == 1) {
w <- w + 2
} else {
w <- w - 10
}
}
#  laboratorio 1 ####
# Curso: Laboratorio de R y Python
# @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# Libraries ####
#install.packages("dplyr")
#install.packages("stringr")
library(dplyr) # library for cleaning datasets
library(stringr)
#-----------------------------------------------------------------#
#Laboratorio 1 Python
print("Hola Mundo")
## Tipo de variable ####
#Correr la lineas de codugo Ctrl + enter
# Codigo a texto Ctrl + Shift + c"
a1 <- 3.1416
print(a1)
typeof(a1)
class(a1)
is.numeric(a1)
# float to int
a2 <- as.integer(a1)
typeof(a2)
class(a2)
is.numeric(a2)
b1 <- 10000
typeof(b1)
b1 <- as.integer(10000)
# Round a number
print(round(4.51))
# power
print(4^2)
# operator pip %>% (Control + shift + M)
x <- sqrt(150) ; x   # ; print()
y <- log(x) ; y
z <- round(y, 2) ; z
w <- abs(z) ; w
150 %>% sqrt() %>% log() %>% round(2) %>% abs()
sqrt(150) %>% log() %>% round(2) %>% abs()
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% pow(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% power(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% ^2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% *2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% **2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% ^2
2^2
pow(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer()^2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% **2
################  Laboratorio 6 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
p_load(readxl, tidyverse, foreign, ggthemes, datos)
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#--------------------------------------------------------------#
value_label <- read.spss("../../data/Riesgo_morosidad.sav"
)
# etiqueta de valores
attributes(value_label)$label.table
#----------------------------------------------------------#
datospss <- read.spss("../../data/Riesgo_morosidad.sav",
use.value.labels = F,
to.data.frame = TRUE)
attributes(datospss)$variable.labels  # etiqueta de variable
# Generamos la figura
ggplot(datospss) + aes(morosidad)
# Generando variables categóricas
datospss$sexo      <- factor(datospss$sexo, levels = c(1, 2),
labels = c("Masculino", "Femenino"))
datospss$morosidad <- factor(datospss$morosidad, levels = c(1,2),
labels = c("No moroso", "Moroso"))
datospss$fonopart  <- factor(datospss$fonopart, levels = c(1, 2),
labels = c("No", "Si"))
datospss$fonolab   <- factor(datospss$fonolab, levels = c(1, 2),
labels = c("No", "Si"))
datospss$autovaluo <- factor(datospss$autovaluo, levels = c(1, 2),
labels = c("No", "Si"))
datospss$esaval    <- factor(datospss$esaval, levels = c(1, 2),
labels = c("No", "Si"))
datospss$tieneaval <- factor(datospss$tieneaval, levels = c(1, 2),
labels = c("No", "Si"))
datospss$tiporenta <- factor(datospss$tiporenta, levels = c(2, 3),
labels = c("Fijo", "Variable"))
datospss$dpto      <- factor(datospss$dpto,
levels = c(1, 2, 3, 4, 5, 6),
labels = c("Lima", "Trujillo", "Arequipa",
"Cusco", "Ica", "Piura"))
## Gráfico de barras ----------------------------------------
ggplot(datospss) + aes(morosidad) +
geom_bar(stat = "count")  # por default es count de contabilizar
# equivalencias
ggplot(datospss) +  aes(x = morosidad) + geom_bar() # es equivalente
ggplot(datospss, aes(morosidad)) + geom_bar()     # es equivalente
# Cambio de orientación ( vertical )
ggplot(datospss) +  aes(y = morosidad) + geom_bar()
# usando coord_flip
ggplot(datospss) + aes(morosidad) + geom_bar() +
coord_flip()
# Temas de fondo con theme()
ggplot(datospss) + aes(morosidad) +
geom_bar() + theme_test()
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_bw(12)
# Añadiendo titulo principal y titulo en ejes
ggplot(datospss, aes(morosidad)) + geom_bar()+
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
#### Colores  ---------------------------------------
browseURL("http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf")
# asignamos colores
ggplot(datospss, aes(morosidad)) +
geom_bar(color = "blue", fill = "white")+
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
# Diferentes colores
ggplot(datospss, aes(morosidad)) +
geom_bar(color = "blue", fill = c("white","orange"))+
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
# Colores en formato hexadecimal (RGB: red, bkue and green)
browseURL("https://www.rapidtables.com/web/color/RGB_Color.html")
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "#0000FF", fill = c("#FFFFFF", "#FFA500")) +
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
# Stack barras ----------------
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack()) +
theme_bw() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss, aes(x = tiporenta, fill = morosidad ) ) +
geom_bar(position = position_fill()) +
theme_bw() +
labs(title = "Situación de la Morosidad según el Tipo de Renta (%)",
x = "Tipo de Renta",
y = "Proporción") +
scale_fill_manual(values = c("darkolivegreen3", "firebrick2"))
ggplot(datospss, aes(y = tiporenta, fill = morosidad ) ) +
geom_bar(position = position_fill()) +
theme_bw() +
labs(title = "Situación de la Morosidad según el Tipo de Renta (%)",
x = "Tipo de Renta",
y = "Proporción") +
scale_fill_manual(values = c("darkolivegreen3", "firebrick2"))
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "#0000FF", fill = c("#FFFFFF", "#FFA500")) +
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack()) +
theme_classic() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack(), , fill = c("#E69F00", "#56B4E9") ) +
theme_classic() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "#0000FF", fill = c("#FFFFFF", "#FFA500")) +
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack(), , fill = c("#E69F00", "#56B4E9") ) +
theme_classic() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack(), color = "black" ,
fill = c("#E69F00", "#56B4E9") ) +
theme_classic() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack(), color = "black" ,
fill = c("#E69F00", "#56B4E9") , width = 0.5) +
theme_classic() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack(), color = "black" ,
fill = c("#E69F00", "#56B4E9") , width = 0.7) +
theme_classic() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack(), color = "black" ,
fill = c("#E69F00", "#56B4E9") , width = 0.6) +
theme_classic() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
# borde blanco de las barras
ggplot(datospss) + aes(edad) + geom_histogram(color = "white")
# borde balnco de la barra y ancho de barra igual a 20
ggplot(datospss) + aes(edad) + geom_histogram(color = "white",
binwidth = 5)
# bins: cantidad de intervalos
ggplot(datospss) + aes(edad) + geom_histogram(color = "white",
bins = 50)
ggplot(datospss) + aes(edad) + geom_histogram()
# borde blanco de las barras
ggplot(datospss) + aes(edad) + geom_histogram(color = "white")
# borde balnco de la barra y ancho de barra igual a 20
ggplot(datospss) + aes(edad) + geom_histogram(color = "white",
binwidth = 5)
# bins: cantidad de intervalos
ggplot(datospss) + aes(edad) + geom_histogram(color = "white",
bins = 50)
ggplot(datospss) + aes(edad) + geom_histogram(color = "white",
fill = "deepskyblue3") +
labs(title = "Histograma de la Edad",
x = "Edad",
y = "Frecuencia absoluta") +
theme_classic()
ggplot(datospss, aes(edad) )+ geom_histogram(color = "white",
fill = "deepskyblue3") +
labs(title = "Histograma de la Edad",
x = "Edad",
y = "Frecuencia absoluta") +
theme_test() +
scale_y_continuous( expand = c(0, 0) )
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.4, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#0000CD", "red")) +
theme(legend.position = "left") # posición de la leyenda
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.4, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#0000CD", "red")) +
theme(legend.position = "left") +# posición de la leyenda
labs(
x = "Edad",
y = "Frecuencia absoluta"
datospss |>
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.4, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#0000CD", "red")) +
theme(legend.position = "left") +# posición de la leyenda
labs(x = "Edad",
y = "Frecuencia absoluta")
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.3, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#0000CD", "red")) +
theme(legend.position = "left") +# posición de la leyenda
labs(x = "Edad",
y = "Frecuencia absoluta")
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.3, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = "left") +# posición de la leyenda
labs(x = "Edad",
y = "Frecuencia absoluta")
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.4, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = "bottom",   # leyenda ubicada en la parte inferior
legend.title = element_blank())
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.4, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = "bottom",   # leyenda ubicada en la parte inferior
legend.title = element_blank()) + # sin titulo en la leyenda
labs(x = "Edad",
y = "Frecuencia absoluta")
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.4, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#0000CD", "red")) +
theme(legend.position = c(0, 0) ,
legend.title = element_blank())
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.4, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = c(0, 0) ,
legend.title = element_blank())
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.5, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = c(0, 0) ,
legend.title = element_blank())
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.5, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = "left") +# posición de la leyenda
labs(x = "Edad",
y = "Frecuencia absoluta")
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.5, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = c(0, 0) ,
legend.title = element_blank())
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.5, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = c(0, 0) ,
legend.title = element_blank()) +
labs(x = "Edad",
y = "Frecuencia absoluta")
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.5, color = "black", bins = 50) + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = c(0, 0) ,
legend.title = element_blank()) +
labs(x = "Edad",
y = "Frecuencia absoluta")
datospss |>
ggplot() + aes(x = edad, fill = morosidad ) +
geom_histogram( alpha = 0.5, color = "black") + # alpha: nivel de transparencia
scale_fill_manual(values=c("#E69F00", "#56B4E9")) +
theme(legend.position = c(0, 0) ,
legend.title = element_blank()) +
labs(x = "Edad",
y = "Frecuencia absoluta")
ggplot(datospss) + aes(edad, fill = dpto) +
geom_histogram(alpha = 0.5, color = "azure4")
ggplot(datospss) + aes(edad, fill = dpto) +
geom_histogram(alpha = 0.5, color = "azure4") +
facet_grid(dpto ~ .)  +   #  filas ~ columnas (por filas)
theme(legend.position = "none")
ggplot(datospss) + aes(edad, fill = dpto) +
geom_histogram(alpha = 0.5, color = "azure4") +
facet_grid(. ~ dpto)  +   # por columnas
theme(legend.position = "none")
ggplot(datospss) + aes(edad, fill = dpto) +
geom_histogram(alpha = 0.5, color = "azure4") +
facet_wrap(~ dpto)  +    # facet_wrap("dpto"),
theme(legend.position = "none")
