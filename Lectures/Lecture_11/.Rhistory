# Primero se cargan las librerias
library(readxl)
library(dplyr)
library(rstudioapi)
library(readr)
#1.
# Leer el archivo CSV
mi_dataframe <- read_csv("BDD_compras_consumidores.csv")
# Escalar un vector de 100 nÃºmeros aleatorios
vector_aleatorio <- runif(100)
vector_escalamiento <- (vector_aleatorio - min(vector_aleatorio)) / (max(vector_aleatorio) - min(vector_aleatorio))
# Escalar todas las columnas numÃ©ricas de la base de datos
mi_dataframe_escalamiento <- as.data.frame(lapply(mi_dataframe, function(x) if(is.numeric(x)) (x - min(x)) / (max(x) - min(x)) else x))
# Ver los primeros registros de la base de datos escalada
head(mi_dataframe_escalamiento)
#2.
siagie <- read.csv("siagie.csv")
library(dplyr)
#Calcular la nota promedio final de cada alumno
siagie_promedio <- siagie %>%
mutate(promedio_final = rowMeans(.[7:ncol(.)], na.rm = TRUE))
#hallar la nota maxima y minima
siagie_max <- siagie %>%
mutate(nota_max = apply(.[7:ncol(siagie)], 1, max, na.rm = TRUE))
siagie_min <- siagie %>%
mutate(nota_min = apply(.[7:ncol(siagie)], 1, min, na.rm = TRUE))
#hallar el promedio y mediana de notas de cada curso.
install.packages("tidyr")
library(tidyr)
siagie_promedio_curso <- siagie %>%
select(7:ncol(.)) %>%
pivot_longer(everything(), names_to = "curso", values_to = "nota") %>%
group_by(curso) %>%
summarize(promedio = mean(nota, na.rm = TRUE), mediana = median(nota, na.rm = TRUE))
siagie <- read.csv("siagie.csv")
siagie <- read.csv("siagie.csv")
siagie <- read.csv("siagie.csv")
siagie <- read.csv("siagie.csv")
library(tidyr)
library(dplyr)
siagie_promedio <- siagie %>%
mutate(promedio_final = rowMeans(.[7:ncol(.)], na.rm = TRUE))
#hallar la nota maxima y minima
siagie_max <- siagie %>%
mutate(nota_max = apply(.[7:ncol(siagie)], 1, max, na.rm = TRUE))
siagie_min <- siagie %>%
mutate(nota_min = apply(.[7:ncol(siagie)], 1, min, na.rm = TRUE))
#
siagie_promedio_curso <- siagie %>%
select(7:ncol(.)) %>%
pivot_longer(everything(), names_to = "curso", values_to = "nota") %>%
group_by(curso) %>%
summarize(promedio = mean(nota, na.rm = TRUE), mediana = median(nota, na.rm = TRUE))
View(siagie_promedio_curso)
View(siagie_promedio)
View(siagie_min)
View(siagie_max)
View(siagie)
################  Laboratorio 11 parte 4 ------------------------
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
options(warn = -1)
# Library ####
# Load libraries ----
library(pacman)
p_load(
tidyverse
, raster
, sf
, rgdal
)
#Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#------------------------------------------------------------#
dpt_shp <- st_read(
'../../data/geopandas_data/LIMITE_DEPARTAMENTO/LIMITE_DEP.shp'
)
dpt_shp$Point_centroid <-st_centroid(dpt_shp)['geometry']
# coordenadas en columnas separadas
dpt_shp$longitude <- st_coordinates(dpt_shp$Point_centroid)[, 1]
dpt_shp$latitude <- st_coordinates(dpt_shp$Point_centroid)[, 2]
#-----------------------------------------------------------#
# plot raster file
tavg <- raster(
"../../data/geopandas_data/tavg.tif"
) |>
rasterToPoints() |>  # coordenadas por raster, se toma el promedio de la variable en el pixel
data.frame() |>
as_tibble() |>
rename(fill1 = 3)
ggplot() +
geom_raster(data = tavg, aes(x, y, fill = fill1))
tavg <- raster(
"../../data/geopandas_data/tavg.tif"
) |>
crop(dpt_shp) |>  # solo quedarme con la info de a nivel departamento
mask(dpt_shp) |>  # Todo pixel fuera de los departamentos tiene NA
rasterToPoints() |>  # coordenadas por raster, se toma el promedio de la variable en el pixel
data.frame() |>
as_tibble() |>
rename(fill1 = 3)
prec <- raster(
"../../data/geopandas_data/prec.tif"
) |>
crop(dpt_shp) |>  # solo quedarme con la info de a nivel departamento
mask(dpt_shp) |>  # Todo pixel fuera de los departamentos tiene NA
rasterToPoints() |>  # coordenadas por raster, se toma el promedio de la variable en el pixel
data.frame() |>
as_tibble() |>
rename(fill1 = 3)
t_a <- colorRampPalette(c("#14e4e8", "#c61707"))
p <-
ggplot() +
geom_raster(data = tavg, aes(x, y, fill = fill1)) +
geom_sf(data = dpt_shp, fill = NA, color = "#15233f") +  # color borde, sin colo al interior
geom_text(
data = dpt_shp, aes(longitude, latitude, label = str_to_sentence(NOMBDEP))
, size = 2, color = "#15233f"
, nudge_x = .1
) +
theme_void() +
scale_fill_gradientn(colors = t_a(2)) +
guides(
fill = guide_colorbar(
barheight = unit(70, units = "mm"), # alto de la barra de la leyenda
barwidth = unit(5, units = "mm"),  # ancho de la barra de la leyenda
direction = "vertical", # dirección de la barra de la leyende
ticks.colour = "black",
title.position = "right", # ubicación del título
title.hjust = 0.5
)
)   +
theme(
legend.position = c(1.1, .5) # posición leyenda
, legend.text = element_text(color = "black", size = 10)
, legend.title = element_text(color = "black",
angle = 90, size = 12)
) +
labs(fill = "Temperatura promedio") # titulo de barra
plot(p)
ggsave(
plot = p  # nombre del objeto
, filename = "../../output/plots/raster_temp_peru.png"    # path
, width = 15  # ancho
, height = 15  # alto
, dpi = 800    # calidad de imagen. A más dpi , más memoria consume
)
plot(p)
View(dpt_shp)
View(dpt_shp)
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
options(warn = -1)
# Library ####
# Load libraries ----
library(pacman)
p_load(
tidyverse
, raster
, sf
, rgdal
)
#Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#-
dpt_shp <- st_read(
'../../data/geopandas_data/LIMITE_DEPARTAMENTO/LIMITE_DEP.shp'
)
View(dpt_shp)
dpt_shp$Point_centroid <-st_centroid(dpt_shp)['geometry']
View(dpt_shp)
dpt_shp$longitude <- st_coordinates(dpt_shp$Point_centroid)[, 1]
dpt_shp$latitude <- st_coordinates(dpt_shp$Point_centroid)[, 2]
View(dpt_shp)
################  Trabajo Final ##########------------------
## Curso: Laboratorio de R y Python ###
## @author: Grupo 4
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
options(warn = -1)
# Library ####
# Load libraries ----
library(pacman)
p_load(
tidyverse
, raster
, sf
, rgdal
)
#Set working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#------------------------------------------------------------#
distritos_shp <- st_read(
'../../data/trabajo_final/MAPAS/districts_1975_remake.shp'
)
View(distritos_shp)
distritos_shp$Point_centroid <-st_centroid(distritos_shp)['geometry']
distritos_shp$Point_centroid <-st_centroid(distritos_shp)['geometry']
dpt_shp <- st_read(
'../../data/geopandas_data/LIMITE_DEPARTAMENTO/LIMITE_DEP.shp'
)
dpt_shp$Point_centroid <-st_centroid(dpt_shp)['geometry']
View(dpt_shp)
View(dpt_shp)
distritos_shp <- st_read(
'../../data/trabajo_final/MAPAS/districts_1975_remake.shp'
)
distritos_shp$Point_centroid <-st_centroid(distritos_shp)['geometry']
mita_boundary <- st_read("../../data/Mita/MitaBoundary.shp")
View(mita_boundary)
mita_boundary |> ggplot() +
geom_sf(color = "darkblue")
distritos <- st_read("../../data/geopandas_data/LIMITE_DISTRITO/LIMITE_DIST.shp")
#
View(distritos)
distritos_shp <- st_read(
'../../data/trabajo_final/MAPAS/districts_1975_remake.shp'
)
# Centroide del distrito
distritos_shp$Point_centroid <-st_centroid(distritos_shp)['geometry']
# distritos de interés del estudio
distritos <- st_read("../../data/geopandas_data/LIMITE_DISTRITO/LIMITE_DIST.shp")
# Centroide del distrito
distritos$Point_centroid <-st_centroid(distritos)['geometry']
distritos_shp$Point_centroid <-st_centroid(distritos_shp)['geometry']
################  Laboratorio 11 parte 1 ------------------------
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
options(warn = -1)
# Library ####
# Load libraries ----
library(pacman)
p_load(
tidyverse  # dplyr, tidyr, stringr, ggplot2, etc in unique library
, sf # provides a set of tools for reading, writing, manipulating, and visualizing spatial data
, units
)
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#------------------------------------------------------------------#
# Read in a shapefile
st_layers("../../data/Mita/mita.gdb")  # lista de layers
# se extrae el layer particular.
# Distritos de interes alrededor del espacio MITA
dist_mita <- st_read("../../data/Mita/mita.gdb", layer = "StudyDistricts")
View(dist_mita)
st_crs(dist_mita)
str(dist_mita)
# Transform the CRS of `dist_mita` to EPSG:4326
dist_mita <- st_transform(dist_mita, 4326)
# Se retorna al sistema de coordenadas iniciales
dist_mita <- st_transform(dist_mita, 32718)
# Plot the shapefile using `ggplot` and `geom_sf`
dist_mita |> ggplot() +
geom_sf()
View(dist_mita)
st_layers("../../data/Mita/mita.gdb")  # lista de layers
# Load shapefile
mita_boundary <- st_read("../../data/Mita/MitaBoundary.shp")
View(mita_boundary)
# Plot Mita boundary del estudio
mita_boundary |> ggplot() +
geom_sf(color = "darkblue")
st_crs(mita_boundary)
mita_boundary |> ggplot() +
geom_sf(color = "darkblue")
mita_boundary |> ggplot() +
geom_sf(color = "darkblue")
# distritos de interés del estudio
distritos <- st_read("../../data/geopandas_data/LIMITE_DISTRITO/LIMITE_DIST.shp")
capitales$UBIGEO <- NULL
capitales <- st_read("../../data/Mita/mita.gdb", layer = "d2_pot")
str(capitales)
# Al estilo de Chat gpt
# Cargar el shapefile de distritos
distritos <- st_read('../../data/trabajo_final/MAPAS/districts_1975_remake.shp'
)
# Cargar el shapefile de los departamentos
departamentos <- st_read('../../data/trabajo_final/MAPAS/department_peru.shp'
)
# Cargar las capas de Agrarian Core Zone y Agrarian Zone desde el geodatabase
geodb <- st_read('../../data/trabajo_final/MAPAS/Figure1Geodatabase.gdb'
)
agrozone_core2 <- geodb['../../data/trabajo_final/MAPAS/Figure1Geodatabase.gdb']
agrarian_zones <- geodb['../../data/trabajo_final/MAPAS/Figure1Geodatabase.gdb']
View(departamentos)
agrozone_core2 <- geodb["agrozone_core2_polygons"]
agrarian_zones <- geodb["agrarian_zones_polygons"]
View(geodb)
st_layers("../../data/trabajo_final/MAPAS/Figure1Geodatabase.gdb")  # lista de layers
agrarian <- st_read("../../data/trabajo_final/MAPAS/Figure1Geodatabase.gdb", layer = "agrarian_zones_polygons")
st_crs(agrarian)
str(agrarian)
View(agrarian)
agrarian |> ggplot() +
geom_sf()
agrozone <- st_read("../../data/trabajo_final/MAPAS/Figure1Geodatabase.gdb", layer = "agrozone_core2_polygons")
st_crs(agrozone)
str(agrozone)
agrozone |> ggplot() +
geom_sf()
# Crear el gráfico para Agrarian Zone
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrarian) +
theme_void()
# Crear el gráfico para Agrarian Core Zone
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone) +
theme_void()
Crear el gráfico para Agrarian Zone
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrarian) +
theme_void()
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone_core2, fill = "red", alpha = 0.5) +
geom_sf(data = agrarian_zones, fill = "blue", alpha = 0.5) +
theme_void() +
theme(legend.position = "bottom") +
labs(fill = "") +
scale_fill_manual(values = c("grey", "white", "red", "blue"),
labels = c("Distritos", "Departamentos", "Agrarian Core Zone", "Agrarian Zone"))
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone, fill = "red", alpha = 0.5) +
geom_sf(data = agrarian_zones, fill = "blue", alpha = 0.5) +
theme_void() +
theme(legend.position = "bottom") +
labs(fill = "") +
scale_fill_manual(values = c("grey", "white", "red", "blue"),
labels = c("Distritos", "Departamentos", "Agrarian Core Zone", "Agrarian Zone"))
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone, fill = "red", alpha = 0.5) +
geom_sf(data = agrarian, fill = "blue", alpha = 0.5) +
theme_void() +
theme(legend.position = "bottom") +
labs(fill = "") +
scale_fill_manual(values = c("grey", "white", "red", "blue"),
labels = c("Distritos", "Departamentos", "Agrarian Core Zone", "Agrarian Zone"))
agrozone |> ggplot() +
geom_sf()
# grafuci
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone, fill = "red", alpha = 0.5) +
geom_sf(data = agrarian, fill = "blue", alpha = 0.5) +
theme_void() +
theme(legend.position = "bottom") +
labs(fill = "") +
scale_fill_manual(values = c("grey", "white", "red", "blue"),
labels = c("Distritos", "Departamentos", "Agrarian Core Zone", "Agrarian Zone"))
# Crear el gráfico
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone, fill = "grey", color = "black") +
geom_sf(data = agrarian, fill = "white", color = "black") +
theme_void() +
theme(legend.position = "bottom",
plot.background = element_rect(color = "black"),
panel.background = element_rect(color = "black")) +
labs(fill = "") +
scale_fill_manual(values = c("grey", "white"),
labels = c("Agrarian Zone Core", "Agrarian Zone")) +
guides(fill = guide_legend(override.aes = list(color = c("black", "black", "black", "black"),
linetype = c(0, 0, 1, 1),
shape = c(15, 15, NA, NA),
fill = c("white", "white", "grey", "white"))),
title = "Legend",
title.position = "top",
title.theme = element_text(size = 12, face = "bold"),
label.theme = element_text(size = 10))
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone, fill = "grey", color = "black") +
geom_sf(data = agrarian, fill = "white", color = "black") +
theme_void() +
theme(legend.position = "bottom",
plot.background = element_rect(color = "black"),
panel.background = element_rect(color = "black")) +
labs(fill = "") +
scale_fill_manual(values = c("grey", "white"),
labels = c("Agrarian Zone Core", "Agrarian Zone")) +
guides(fill = guide_legend(override.aes = list(color = c("black", "black", "black", "black"),
linetype = c(0, 0, 1, 1),
shape = c(15, 15, NA, NA),
fill = c("white", "white", "grey", "white"))),
title = "Legend",
title.position = "top",
title.theme = element_text(size = 12, face = "bold"),
label.theme = element_text(size = 10))
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone, fill = "grey", color = "black") +
geom_sf(data = agrarian, fill = "white", color = "black") +
theme_void() +
theme(legend.position = "bottom",
plot.background = element_rect(color = "black"),
panel.background = element_rect(color = "black")) +
labs(fill = "") +
scale_fill_manual(values = c("grey", "white"),
labels = c("Agrarian Zone Core", "Agrarian Zone")) +
guides(fill = guide_legend(override.aes = list(color = c("black", "black", "black", "black"),
linetype = c(0, 0, 1, 1),
shape = c(15, 15, NA, NA),
fill = c("white", "white", "grey", "white"))),
title = "Legend",
title.position = "top",
title.theme = element_text(size = 12, face = "bold"),
label.theme = element_text(size = 10))
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone, fill = "grey", color = "black") +
geom_sf(data = agrarian, fill = "white", color = "black") +
theme_void() +
theme(legend.position = "bottom",
plot.background = element_rect(color = "black"),
panel.background = element_rect(color = "black")) +
labs(fill = "") +
scale_fill_manual(values = c("grey", "white"),
labels = c("Agrarian Zone Core", "Agrarian Zone")) +
guides(fill = guide_legend(override.aes = list(color = c("black", "black", "black", "black"),
linetype = c(0, 0, 1, 1),
shape = c(15, 15, NA, NA),
fill = c("white", "white", "grey", "white"))),
title = "Legend",
title.position = "top",
title.theme = element_text(size = 12, face = "bold"),
label.theme = element_text(size = 10))
# Crear el gráfico
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone, fill = "grey", color = "black") +
geom_sf(data = agrarian, fill = "white", color = "black") +
theme_void() +
theme(legend.position = "bottom",
plot.background = element_rect(color = "black"),
panel.background = element_rect(color = "black")) +
labs(fill = "") +
scale_fill_manual(values = c("grey", "white"),
labels = c("Agrarian Zone Core", "Agrarian Zone")) +
guides(fill = guide_legend(override.aes = list(color = c("black", "black", "black", "black"),
linetype = c(0, 0, 1, 1),
shape = c(15, 15, NA, NA),
fill = c("white", "white", "grey", "white"))),
title = "Legend",
title.position = "top",
title.theme = element_text(size = 12, face = "bold"),
label.theme = element_text(size = 10))
ggplot() +
geom_sf(data = distritos, fill = "grey", color = "black") +
geom_sf(data = departamentos, fill = "white", color = "black") +
geom_sf(data = agrozone, fill = "grey", color = "black") +
geom_sf(data = agrarian, fill = "white", color = "black") +
theme_void() +
theme(legend.position = "bottom",
plot.background = element_rect(color = "black"),
panel.background = element_rect(color = "black")) +
labs(fill = "") +
scale_fill_manual(values = c("grey", "white"),
labels = c("Agrarian Zone Core", "Agrarian Zone")) +
guides(fill = guide_legend(override.aes = list(color = c("black", "black", "black", "black"),
linetype = c(0, 0, 1, 1),
shape = c(15, 15, NA, NA),
fill = c("white", "white", "grey", "white"))),
title = "Legend",
title.position = "top",
title.theme = element_text(size = 12, face = "bold"),
label.theme = element_text(size = 10))
