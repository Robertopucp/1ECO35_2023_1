strsplit(str_trim(
str_to_upper(
gsub("[(|)|,]", "",string_4)
)
),
" ")
no TRUE
TRUE & FALSE
T & F
T or F
T | F
F | F
a <- c(1,2,3,4,"Perú")
print(a)
class(a)
class(a[1])
typeof(a)
a <- c(1,2,3,4)
a <- append(a, 5)
print(a)
b <-  rep(2,3) # repeat 2, 3 times
b <-  rep(2,3) # repeat 2, 3 times
print(b)
append(a,b)
append(a,b)
print(mean(a))
print(sd(a))
print(sample(1:100, size = 10))
rep(sample(1:100, size = 10), 3)
length( rep(sample(1:100, size = 10), 3) )
vector <- rep(sample(1:100, size = 10), 3)
cat("Primeroa 5 elementos",vector[1:5])
cat("Primer elemento",vector[1])
cat("Primeroa 5 elementos",vector[1:5])
cat("Primer elemento",vector[1])
cat("Primeroa 5 elementos",vector[1:5])
cat("Primer elemento",vector[1])
cat("Primeroa 5 elementos",vector[1:5])
cat("index 2 to 20",vector[2:20])
cat("index 2 to on ",vector[2:])
cat("index 2 to on ",vector[2::])
cat("index 2 to on ",vector[2:])
cat("index 2 to on ",vector[2:-1])
cat("index 2 to on ",vector[2::])
cat("index 2 to on ",vector[2:])
cat("index 2 to on ",vector[2:end])
cat("index 2 to on ",vector[2:length(vector)])
cat("some indexing",vector[c(2,5,17)])
cat("Primeros 5 elementos",vector[:5])
cat("Primeros 5 elementos",vector[1:5])
cat("Primer elemento",vector[1])
cat("Primeros 5 elementos",vector[1:5])
cat("index 2 to 20",vector[2:20])
cat("index 2 to on",vector[2:length(vector)])
cat("some indexing",vector[c(2,5,17)])
cat("Primer elemento\n",vector[1])
cat("Primeros 5 elementos\n",vector[1:5])
cat("index 2 to 20\n",vector[2:20])
cat("index 2 to on\n",vector[2:length(vector)])
cat("some indexing\n",vector[c(2,5,17)])
cat("Primer elemento\n",vector[1])
genero <- c("Masculino", "Femenino", "Femenino", "Masculino")
class(genero)
genero <- as.factor(genero)
class(genero)
is.factor(genero)
genero
genero$Masculino
genero2 <- factor(genero,levels = c("Masculino", "Femenino"),
labels =c("M", "F") )
genero2
genero2$F
# Añadir el nivel socio-eco
nivel <- factor(c("A", "C", "B", "C"),
order = T,
levels = c("A", "B", "C","D"))
nivel
class(nivel)
y <- seq(from = 0, to = 19, by = 2)
y <- seq(0, 19, 2)
print(y)
typeof(y)
y[1]
y <- seq( 1, 10)
print(y)
seq(100)
1:100
seq_len(100)
seq(100)
1:100 # easy way
seq(100,1000, length.out = 50)
seqex <- seq(100,1000, length.out = 50)
length(seqex)
indices <- split(seq(100), sort( seq(100) %% 3 ) )
indices
names(indices) <- c('training', 'est', 'test') ## add labels
print(indices)
indices$est
indices$test
attributes(indices) # atributos
indices$training
dis2 <- list('ATE', 'BARRANCO','BREÑA', 'CALLAO', 'CARABAYLLO','CHACLACAYO','CHORRILLOS','CIENEGUILLA'
,'COMAS','EL_AGUSTINO','INDEPENDENCIA')
dis2[[1]] # get element
dis2[2:5]
dis2[-1] # drop first element
# unlist
unlist(dis2)
cat("Suma:", sum(unlist(num)),'\n', "Minimo:", min(unlist(num)), '\n', "Maximo:", max(unlist(num)))
num <- list(13,5,5,8,9,10,5,8,13,1,20)
append(num, 102)
# add a list
num2 <- list(10,20,30)
append(num, num2)
cat("Suma:", sum(unlist(num)),'\n', "Minimo:", min(unlist(num)), '\n', "Maximo:", max(unlist(num)))
Matrix <- matrix(runif, nrow = 10)
Matrix <- matrix(runif, nrow = 10)
Matrix <- matrix(runif(100), nrow = 10)
print(Matrix)
typeof(Matrix)  # tipo de elementos
class(Matrix)   # tipo de estrucutura del objeto
a <- array(1:20)
a
M <- matrix(seq(20), nrow = 2)
print(M)
typeof(M)
dim(M)
M
A <- matrix(rnorm(100),10)
A[2:4,] # rows selecrtion
A[,1:6]  # columns selecrtion
A[,-c(2,3)] # drop columns
M1 <- matrix(0,8,2)
print(M1)
M2 <- matrix(1,8, 4)
print(M2)
a <- array(1:20)
print(a)
M1 <- matrix(0,8,2)
print(M1)
M2 <- matrix(1,8, 4)
print(M2)
# horizontal stack
M3 <- cbind(M1,M2)
M3
M4 = matrix(seq(12), nrow =2)
print(M4)
# vertical stack
M5 <- rbind(M3,M4)
print(M5)
t(M5)
A <- matrix(rnorm(100),10)
print(A)
A[2:4,] # rows selecrtion
A[,1:6]  # columns selecrtion
A[,-c(2,3)] # drop columns
# Reshape
matrix(A, nrow = 50, ncol = 2)
" 3. 8 List"
dis2 <- list('ATE', 'BARRANCO','BREÑA', 'CALLAO', 'CARABAYLLO','CHACLACAYO','CHORRILLOS','CIENEGUILLA'
,'COMAS','EL_AGUSTINO','INDEPENDENCIA')
dis2[[1]] # get element
dis2[2:5]
dis2[-1] # drop first element
# unlist
unlist(dis2)
# add new element using append
num <- list(13,5,5,8,9,10,5,8,13,1,20)
append(num, 102)
# add a list
num2 <- list(10,20,30)
append(num, num2)
cat("Suma:", sum(unlist(num)),'\n', "Minimo:", min(unlist(num)), '\n', "Maximo:", max(unlist(num)))
# list made of many class objects
list1 <- list(100:130, "R", list(TRUE, FALSE))
#-------------------------------------------------------------#
## OLS ----
set.seed(756)
x1 <- runif(500)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
# Poblacional regression (Data Generating Process GDP)
Y <- 1 + 0.8*x1 + 1.2*x2 + 0.5*x3 + 1.5*x4 + e
#M1 <- matrix(0,8,2)
X <- cbind(matrix(1,500), x1,x2,x3,x4)
head(X)
#inv(X) or solve (X)
beta <- solve(t(X) %*% X) %*% (t(X) %*% Y)
beta
X <- rnorm(1000, mean=1, sd=0.5)
Xbar <- mean(X)
Xbar
X
Sigma2 <- sum((Xbar-X)^2)/dim(X)[1]
Sigma2
Sigma2
dim(X)[1]
X <- rnorm(1000, mean=1, sd=0.5)
Xbar <- mean(X)
Sigma2 <- sum((Xbar-X)^2)/lenght(X)
X <- rnorm(1000, mean=1, sd=0.5)
Xbar <- mean(X)
Sigma2 <- sum((Xbar-X)^2)/length(X)
Sigma = sqrt(Sigma2)
Sigma2
Sigma
hist(X, bins = 100)
hist(X)
hist(X, breaks = 100)
browseURL("https://r4ds.had.co.nz/")
print("Hello World")
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
install.packages("dplyr")
install.packages("stringr")
library(dplyr) # librarfor cleaning datasets
library(stringr)
library(string)
print("Hola Mundo")
a1 <- 3.1416
typeof(a1)
class(a1)
a2 <- as.integer(a1)   # int(a1)
typeof(a2)
class(a2)
print(round(4.51))
print(4^2)
x <- sqrt(150) ; x
x <- sqrt(150) ; x   # ; print()
y <- log(x) ; y
z <- round(y, 2) ; z
w <- abs(z) ; w
150 %>% sqrt() %>% log() %>% round(2) %>% abs()
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer()
c1 <- "My first python code"
c1 <- "First python code"
c2 <- 'at R y python Class'
c3 <- c1 + c2 # error
a <- paste0(c1,' : semester 2022-1') #paste0 une sin espacios
print(a)
a <- paste0(c1,'semester 2022-1') #paste0 une sin espacios
print(a)
a <- paste0(c1,' : semester 2022-1') #paste0 une sin espacios
print(a)
a <- paste(c1,'semester 2022-1', sep = " : ")
print(a)
a <- paste(c1,'semester 2022-1', sep = " / ")
print(a)
d <- 2022
paste0(c1,' : semester ',d, '-1')
cat('Fisrt letter is :', substr(c1, 1,1)  )
#first word
cat('Fisrt word is :', substr(c1, 1,5)  )
string_1 = 'hello world'
string_2 = '10'
str_to_upper(string_1)
str_to_lower(string_1)
str_length(string_1)
str_split(string_1, " ")  # (word, pattern )
str_split(string_1, "w")
while (TRUE){
coin <- round( runif(1) )  # redondear al entero más cercano
if (coin == 1) {
break
} else {
print(point)
}
}
#  laboratorio 2 ####
# Curso: Laboratorio de R y Python
# @author: Roberto Mendoza
# -------------------------------------------------------#
## Condicional ----
y <- runif(10,-10,10) # runif( n: cantidad de elementos, inicio , final)
if (mean(y) > 0) {
dummy <- 1
} else {
dummy <- 0
}
print(dummy)
## Nested If statement -----
# v <- 2
# v <- NA
# v <- "String"
v <- TRUE
if  ( is.numeric(v) ){
cat(v, " es un numero entero (no missing)")
} else if ( is.na(v) ) {
cat(v, " es un missing")
} else if ( is.character(v) ){
cat(v, " es un string")
} else if ( is.logical(v) ){
cat(v, " es un Boolean")
} else {
print("Sin resultado")
}
# Loops -----
# -------------------------------------------------------#
#  saving
S <- 1000
# Periods
n <- 10
# interes rate
i <- 0.025
year = 1
while (year < n){
S <-  S*(1+i)
year <-  year + 1
cat( "periodo ", year, ": ", S,"\n")
}
## While + If statement ----
w <- 10
while (w > 7  & w <= 15){
coin <- round( runif(1) )
coin
if (coin == 1) {
w <- w + 2
} else {
w <- w - 10
}
}
print(w)
## For ----
ages<-  c(21, 23, 25, 24, 20)
for (age in ages) {
print(age+10 )
}
## For and Next ----
for (i in 1:50) {
if(i %in% 15:20) { # Ignora los primeros 20 elementos
next
print(i  + 1000)
}
cat("Ejecutanto",i,"\n")
}
## For and Next, break ----
for (j in 1:100){
print(j)
if(j > 20){
break
}
}
## While + break ----
while (TRUE){
coin <- round( runif(1) )  # redondear al entero más cercano
if (coin == 1) {
break
} else {
print(point)
}
}
calculator <- function(x,y,z)
{
result = x*y*z
return(result)
}
calculator( 158, 38, 10 )
calculator( 158, 38)
calculator <- function(x,y,z)
{
result = x*y*z
return(result)
}
calculator( 158, 38, 10 )
calculator_square <- function(x,y){
x2 <- x * x
y2 <- y * y
result <- x2 * y2
return(list(x2,y2,paste0("La multiplicación del cuadrado es:", result)) )
}
calculator_square(3, 4)[1]
calculator_square(3, 4)[[1]] # para ontener el elemento simple
calculator_square_2 <- function(x,y){
x2 <- x * x
y2 <- y * y
result <- x2 * y2
if (200 >= result) {
return( cat( "Large number. Get only the result variable: ", result) )
} else {
return( print( "Too large number. Do not return variables!") )
}
}
w <- 10
while (w > 7  & w <= 15){
coin <- round( runif(1) )
print(coin)
if (coin == 1) {
w <- w + 2
} else {
w <- w - 10
}
}
#  laboratorio 1 ####
# Curso: Laboratorio de R y Python
# @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# Libraries ####
#install.packages("dplyr")
#install.packages("stringr")
library(dplyr) # library for cleaning datasets
library(stringr)
#-----------------------------------------------------------------#
#Laboratorio 1 Python
print("Hola Mundo")
## Tipo de variable ####
#Correr la lineas de codugo Ctrl + enter
# Codigo a texto Ctrl + Shift + c"
a1 <- 3.1416
print(a1)
typeof(a1)
class(a1)
is.numeric(a1)
# float to int
a2 <- as.integer(a1)
typeof(a2)
class(a2)
is.numeric(a2)
b1 <- 10000
typeof(b1)
b1 <- as.integer(10000)
# Round a number
print(round(4.51))
# power
print(4^2)
# operator pip %>% (Control + shift + M)
x <- sqrt(150) ; x   # ; print()
y <- log(x) ; y
z <- round(y, 2) ; z
w <- abs(z) ; w
150 %>% sqrt() %>% log() %>% round(2) %>% abs()
sqrt(150) %>% log() %>% round(2) %>% abs()
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% pow(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% power(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% ^2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% *2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% **2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% ^2
2^2
pow(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer()^2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% **2
installed.packages("tabulizer")
################  Laboratorio 9 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
# Load libraries ----
library(pacman)
p_load(
tidyverse  # dplyr, tidyr, stringr, ggplot2, etc in unique library
, tqdm
, XML
, RSelenium
)
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
p_load(
tidyverse  # dplyr, tidyr, stringr, ggplot2, etc in unique library
, XML
, RSelenium
)
# Inicializar el controlador de RSelenium
driver <- rsDriver(browser = "chrome")
remDr <- driver[["client"]]
url <- "https://visitas.servicios.gob.pe/consultas/index.php?ruc_enti=20168999926"
remDr$navigate(url)
# Crear un diccionario vacío
all_tables <- list()
# Navegar a la página web
url <- "https://visitas.servicios.gob.pe/consultas/index.php?ruc_enti=20168999926"
remDr$navigate(url)
# Navigate to the initial webpage
url <- "https://visitas.servicios.gob.pe/consultas/index.php?ruc_enti=20168999926"
remDr$navigate(url)
p_load(
tidyverse  # dplyr, tidyr, stringr, ggplot2, etc in unique library
, xml2
, RSelenium
,rvest
)
rD <- RSelenium::rsDriver(browser = "chrome")
remDr <- rD[["client"]]
# Navigate to the initial webpage
url <- "https://visitas.servicios.gob.pe/consultas/index.php?ruc_enti=20168999926"
remDr$navigate(url)
url <- "https://visitas.servicios.gob.pe/consultas/index.php?ruc_enti=20168999926"
remDr$navigate(as.character(url))
library(httr)
url <- "https://visitas.servicios.gob.pe/consultas/index.php?ruc_enti=20168999926"
response <- GET(as.character(url))
content <- content(response, as = "text")
remDr$navigate(response)
