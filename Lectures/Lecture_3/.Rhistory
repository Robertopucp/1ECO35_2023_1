extract_numb <- function(x){
return( str_extract(x,"[0-9]+") )
}
sapply(vector_tx, extract_numb)
################  laboratorio 2 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# Library ####
library(pacman)  # permite llamar a varias librerias de manera simultánea
p_load(dplyr, readxl, rstudioapi, stringi)
# dplyr: para manejo de base de datos
# readxl: lectura de archivo excel, csv
# stringi: manejo de texto
# rstudioapi: se aplicará para definir la ruta de trabajo
getwd()
# Set working directory (directorio de trabajo : ruta en la computadora)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
vector_tx <- c("Tiene 9 años","Dice tener 24 ", "35 years",
"Acabod e cumplir 40", "El año paso tuvo 20")
extract_numb <- function(x){
return( str_extract(x,"[0-9]+") )
}
sapply(vector_tx, extract_numb)
################  laboratorio 2 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# Library ####
library(pacman)  # permite llamar a varias librerias de manera simultánea
p_load(dplyr, readxl, rstudioapi, stringr)
vector_tx <- c("Tiene 9 años","Dice tener 24 ", "35 years",
"Acabod e cumplir 40", "El año paso tuvo 20")
extract_numb <- function(x){
return( str_extract(x,"[0-9]+") )
}
sapply(vector_tx, extract_numb)
install.packages("stringr")
install.packages("stringr")
vector_tx <- c("Tiene 9 años","Dice tener 24 ", "35 years",
"Acabod e cumplir 40", "El año paso tuvo 20")
extract_numb <- function(x){
return( str_extract(x,"[0-9]+") )
}
sapply(vector_tx, extract_numb)
################  laboratorio 2 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
#install.packages("stringr")
# Library ####
library(pacman)  # permite llamar a varias librerias de manera simultánea
p_load(dplyr, readxl, rstudioapi, stringr)
# dplyr: para manejo de base de datos
# readxl: lectura de archivo excel, csv
# stringi: manejo de texto
# rstudioapi: se aplicará para definir la ruta de trabajo
getwd()
# Set working directory (directorio de trabajo : ruta en la computadora)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#-----------------------#
#### Lappy & Sapply #####
#-----------------------#
"Lapply and Sapply"
vector <- seq(100)
lapply(vector, function(square) {square^2-mean(vector)}) # resultado en formato lista
sapply(vector, function(square) {square^2-mean(vector)}) # vector canonico simple
# A cada elemento del vector se eleva al cuadrado y se resta la media del vector
# Forma directa
vector^2-mean(vector)
"Función 1"
lapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato lista
sapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato vector
"Función 2, de estandarización de los elementos de un vector"
lapply(vector, function(i)  ( i -  mean(vector) ) / sd(vector) )
# Asignando el nombre de la función: standarize
standarize <- function(i, mean, sd){
( i -  mean ) / sd
}
lapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
sapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
# lapply(x, FUN, ...) ... significa argumentos adicionales para la función
"Función 3"
lapply(vector, function(i){
if (i < 50){
out = 1
} else {
out = NA
}
return(out)
})
sapply(vector, function(i){
if (i < 50) out = 1  else  out = NA
return(out)
}
)
# Regular expresion aplicado a un vector de string #
vector_tx <- c("Tiene 9 años","Dice tener 24 ", "35 years",
"Acabod e cumplir 40", "El año paso tuvo 20")
extract_numb <- function(x){
return( str_extract(x,"[0-9]+") )
}
sapply(vector_tx, extract_numb)
lapply(vector_tx, extract_numb)
sapply(vector_tx, extract_numb)[1]
sapply(vector_tx, extract_numb)[2]
vector_tx <- c("Tiene 9 años","Dice tener 24 ", "35 years",
"Acabod e cumplir 40", "El año paso tuvo 20")
extract_numb <- function(x){
return( as.numeric(str_extract(x,"[0-9]+")) )
}
sapply(vector_tx, extract_numb)
lapply(vector_tx, extract_numb)
str(sapply(vector_tx, extract_numb))
atributes(sapply(vector_tx, extract_numb))
"Acabod e cumplir 40", "El año paso tuvo 20")
vector_tx <- c("Tiene 9 años","Dice tener 24 ", "35 years",
"Acabod e cumplir 40", "El año paso tuvo 20")
extract_numb <- function(x){
return( as.numeric(str_extract(x,"[0-9]+")) )
}
sapply(vector_tx, extract_numb)
lapply(vector_tx, extract_numb)
sapply(vector_tx, extract_numb)[1]
sapply(vector_tx, extract_numb)[1][0]
sapply(vector_tx, extract_numb)[1]+sapply(vector_tx, extract_numb)[2]
sapply(vector_tx, extract_numb)
lapply(vector_tx, extract_numb)
################  laboratorio 2 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
#install.packages("stringr")
# Library ####
library(pacman)  # permite llamar a varias librerias de manera simultánea
p_load(dplyr, readxl, rstudioapi, stringr)
# dplyr: para manejo de base de datos
# readxl: lectura de archivo excel, csv
# stringi: manejo de texto
# rstudioapi: se aplicará para definir la ruta de trabajo
getwd()
# Set working directory (directorio de trabajo : ruta en la computadora)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#-----------------------#
#### Lappy & Sapply #####
#-----------------------#
"Lapply and Sapply"
vector <- seq(100)
lapply(vector, function(square) {square^2-mean(vector)}) # resultado en formato lista
sapply(vector, function(square) {square^2-mean(vector)}) # vector canonico simple
# A cada elemento del vector se eleva al cuadrado y se resta la media del vector
# Forma directa
vector^2-mean(vector)
"Función 1"
lapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato lista
sapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato vector
"Función 2, de estandarización de los elementos de un vector"
lapply(vector, function(i)  ( i -  mean(vector) ) / sd(vector) )
# Asignando el nombre de la función: standarize
standarize <- function(i, mean, sd){
( i -  mean ) / sd
}
lapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
sapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
# lapply(x, FUN, ...) ... significa argumentos adicionales para la función
"Función 3"
lapply(vector, function(i){
if (i < 50){
out = 1
} else {
out = NA
}
return(out)
})
sapply(vector, function(i){
if (i < 50) out = 1  else  out = NA
return(out)
}
)
# Regular expresion aplicado a un vector de string #
vector_tx <- c("Tiene 9 años","Dice tener 24 ", "35 years",
"Acabod e cumplir 40", "El año paso tuvo 20")
extract_numb <- function(x){
return(str_extract(x,"[0-9]+") )
}
sapply(vector_tx, extract_numb)
lapply(vector_tx, extract_numb)
#-------------------------------#
# Loop replacement BBDD ####
#-------------------------------#
# 2 se aplica la función a los elementos de cada columna
cps2012  <- get(load("../data/cps2012.Rdata"))
################  laboratorio 2 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
#install.packages("stringr")
# Library ####
library(pacman)  # permite llamar a varias librerias de manera simultánea
p_load(dplyr, readxl, rstudioapi, stringr)
# dplyr: para manejo de base de datos
# readxl: lectura de archivo excel, csv
# stringi: manejo de texto
# rstudioapi: se aplicará para definir la ruta de trabajo
getwd()
# Set working directory (directorio de trabajo : ruta en la computadora)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#-----------------------#
#### Lappy & Sapply #####
#-----------------------#
"Lapply and Sapply"
vector <- seq(100)
lapply(vector, function(square) {square^2-mean(vector)}) # resultado en formato lista
sapply(vector, function(square) {square^2-mean(vector)}) # vector canonico simple
# A cada elemento del vector se eleva al cuadrado y se resta la media del vector
# Forma directa
vector^2-mean(vector)
"Función 1"
lapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato lista
sapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato vector
"Función 2, de estandarización de los elementos de un vector"
lapply(vector, function(i)  ( i -  mean(vector) ) / sd(vector) )
# Asignando el nombre de la función: standarize
standarize <- function(i, mean, sd){
( i -  mean ) / sd
}
lapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
sapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
# lapply(x, FUN, ...) ... significa argumentos adicionales para la función
"Función 3"
lapply(vector, function(i){
if (i < 50){
out = 1
} else {
out = NA
}
return(out)
})
sapply(vector, function(i){
if (i < 50) out = 1  else  out = NA
return(out)
}
)
# Regular expresion aplicado a un vector de string #
vector_tx <- c("Tiene 9 años","Dice tener 24 ", "35 years",
"Acabod e cumplir 40", "El año paso tuvo 20")
extract_numb <- function(x){
return(str_extract(x,"[0-9]+") )
}
sapply(vector_tx, extract_numb)
lapply(vector_tx, extract_numb)
#-------------------------------#
# Loop replacement BBDD ####
#-------------------------------#
# 2 se aplica la función a los elementos de cada columna
cps2012  <- get(load("../../data/cps2012.Rdata"))
cps2012  <- get(load("../../data/cps2012.Rdata"))
# load R dataset format, extensión Rdata
# Tomamos la varianza de cada columna
apply(cps2012, 2, var) # tomando la varianza por columna (Margin:2)
set.seed(756)
x1 <- runif(500) # distribución uniforme entre 0 y 1
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
X <- cbind(matrix(1,500), x1,x2,x3,x4)
# matrix(1,500) vector columna de unos (500 observaciones)
apply(X, 2, mean)  # MARGIN == 2 para columnas (columns)
apply(X, 1, mean)  # MARGIN == 1 para filas (rows)
apply(X, 1, sd)  # MARGIN == 1 para filas
apply(X, 2, min)
apply(X, 1, max)
set.seed(756)
x1 <- rnorm(500) # distribución uniforme entre 0 y 1
x2 <- rnorm(500)
x3 <- rnorm(500)
x4 <- rnorm(500)
X <- cbind(x1,x2,x3,x4)
# matrix(1,500) vector columna de unos (500 observaciones)
apply(X, 2, mean)  # MARGIN == 2 para columnas (columns)
apply(X, 1, mean)  # MARGIN == 1 para filas (rows)
apply(X, 1, sd)  # MARGIN == 1 para filas
apply(X, 2, min)
apply(X, 1, max)
apply(X, 2, min)
apply(X, 2, function(i){
( i -  mean(i) ) / sd(i)
} )
apply(X, 2, function(i) ( i -  mean(i) ) / sd(i) )
set.seed(756)
x1 <- rnorm(50) # distribución uniforme entre 0 y 1
x2 <- rnorm(50)
x3 <- rnorm(50)
x4 <- rnorm(50)
X <- cbind(x1,x2,x3,x4)
# matrix(1,500) vector columna de unos (500 observaciones)
apply(X, 2, mean)  # MARGIN == 2 para columnas (columns)
apply(X, 1, mean)  # MARGIN == 1 para filas (rows)
apply(X, 1, sd)  # MARGIN == 1 para filas
apply(X, 2, min)
apply(X, 1, max)
"Estandarizar una matriz "
apply(X, 2, function(i){
( i -  mean(i) ) / sd(i)
} )
apply(X, 2, function(i) ( i -  mean(i) ) / sd(i) )
vector <- seq(100)
lapply(vector, function(square) {square^2-mean(vector)}) # resultado en formato lista
sapply(vector, function(square) {square^2-mean(vector)}) # vector canonico simple
# A cada elemento del vector se eleva al cuadrado y se resta la media del vector
# Forma directa
vector^2-mean(vector)
"Función 1"
lapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato lista
sapply(vector, function(x){
out = x*(1/3) - 0.5*x
return(out)
} ) # resultado en formato vector
"Función 2, de estandarización de los elementos de un vector"
lapply(vector, function(i)  ( i -  mean(i) ) / sd(i) )
lapply(vector, function(i)  ( i -  mean(vector) ) / sd(vector) )
(X[,1]-mean(X[,1]))/(sd(X[,1]))
apply(X, 2, function(i) ( i -  mean(i) ) / sd(i) )
args(demean)
cps2012  <- get(load("../../data/cps2012.Rdata"))
# load R dataset format, extensión Rdata
# Tomamos la varianza de cada columna
apply(cps2012, 2, var) # tomando la varianza por columna (Margin:2)
X <- cps2012[ , which(apply(cps2012, 2, var) != 0)]
# Se exlucye las columnas constantes
demean<- function (x){ x- mean(x)}
X<- apply(X, 2, demean)
# Conocer los elementos de una función creada o libreria
args(demean)
caso1 <- function(...) return(sum(...))
caso1(2,4,5)
caso2 <- function(...) {
return(prod(...))
}
caso2(sample(1:50, size = 5))
str(sandwich)
args(lapply)
str(stringr)
args(stringr)
args(readxl)
args(read.csv)
args(lapply)
args(read.csv)
args(lapply)
caso1 <- function(...) {
return(sum(...))
}
caso1(2,4,5)
caso2 <- function(...) {
return(prod(...))
}
caso2(sample(1:50, size = 5))
datos <- read.csv("BDD_compras_consumidores.csv", sep = ";")
datos <- read.csv("../../BDD_compras_consumidores.csv", sep = ";")
datos <- read.csv("../BDD_compras_consumidores.csv", sep = ";")
datos <- read.csv("../../BDD_compras_consumidores.csv", sep = ";")
cps2012  <- get(load("../../data/cps2012.Rdata"))
getwd()
datos <- read.csv("../../datos/BDD_compras_consumidores.csv", sep = ";")
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
str(datos)
datos$Channel
datos$Region
View(datos)
View(extract_numb)
caso1 <- function(...) {
return(sum(...))  # suma de estos argumentos desconocidos
}
caso1(2,4,5)
caso1(2,4,5,12,45,3,6,9)
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
#--------------------------#
#### VI. Familia APPLY #####
#--------------------------#
# Apply. Aplica una función a un dataframe
apply(datos[, 3:8], 1, sum)  # 1 es por filas
browseURL("https://archive.ics.uci.edu/ml/datasets/Wholesale+customers")
tab(datos)
table(datos)
table(datos$Channel)
table(datos$Region)
apply(datos[, 3:8], 1, sum)  # 1 es por filas
datos$Ventas <- apply(datos[, 3:8], 1, sum) # creando nueva columna de ventas
apply(datos[,3:8], 2, sum)    # 2 es por columnas
apply(datos[,3:8], 2, sum)
# 2 es por columnas (total de ventas por tipo de producto)
apply(datos[,3:8], 2, mean)
# 2 es por columnas (promedio de ventas por tipo de producto)
getGroupMembers("Summary")
# 2 es por columnas (total de ventas por tipo de producto)
apply(datos[,3:8], 2, all)
# 2 es por columnas (total de ventas por tipo de producto)
apply(datos[,3:8], 2, range)
getGroupMembers("Summary")
apply(datos[,3:8], 2, min)
apply(datos[,3:8], 2, max)
apply(datos[,3:8], 2, range)
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
str(datos)
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
str(datos) # muestra el tipo de variable de cada columna
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
datos2 <- apply(datos[, 3:8], 2, function(x) x/3.9)
datos2
datos2 <- apply(datos[, 3:8], 2, function(x) x/3.9)
datos2
datos2 <- cbind(datos[, 1:2], datos2)  # uniendo bases de columa en columna
View(datos2)
View(datos2)
datos2 <- apply(datos[, 3:8], 2, function(x) x/3.9)
datos3 <- cbind(datos[, 1:2], datos2)  # uniendo bases de columa en columna
View(datos3)
tapply(datos$Ventas, datos$Region, mean)
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
str(datos) # muestra el tipo de variable de cada columna
# Convirtiendo a variables categórica
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
# Tabla de frecuencia de algunas variables
table(datos$Channel)
table(datos$Region)
#--------------------------#
#### VI. Familia APPLY #####
#--------------------------#
# Apply. Aplica una función a un dataframe
# Total de ventas
apply(datos[, 3:8], 1, sum)  # 1 es por filas
datos$Ventas <- apply(datos[, 3:8], 1, sum) # creando nueva columna de ventas
apply(datos[,3:8], 2, sum)
# 2 es por columnas (total de ventas por tipo de producto)
apply(datos[,3:8], 2, mean)
# 2 es por columnas (promedio de ventas por tipo de producto)
# Con apply(), además de sumar, podemos hacer otras operaciones
# que vienen cargadas por defecto en R.
getGroupMembers("Summary")
apply(datos[,3:8], 2, min)
apply(datos[,3:8], 2, max)
apply(datos[,3:8], 2, range)
# Aplicando una función
# conversión a dólares
datos2 <- apply(datos[, 3:8], 2, function(x) x/3.9)
datos3 <- cbind(datos[, 1:2], datos2)  # uniendo bases de columa en columna
# tapply(variable numérica, variable categórica, estadístico)
tapply(datos$Ventas, datos$Region, mean)
tapply(datos$Ventas, datos$Channel, mean)
apply(datos[,3:8], 2, min)
apply(datos[,3:8], 2, max)
apply(datos[,3:8], 2, range)
