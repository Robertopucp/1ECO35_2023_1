M4 = matrix(seq(12), nrow =2)
print(M4)
# vertical stack
M5 <- rbind(M3,M4)
print(M5)
t(M5)
A <- matrix(rnorm(100),10)
print(A)
A[2:4,] # rows selecrtion
A[,1:6]  # columns selecrtion
A[,-c(2,3)] # drop columns
# Reshape
matrix(A, nrow = 50, ncol = 2)
" 3. 8 List"
dis2 <- list('ATE', 'BARRANCO','BREÑA', 'CALLAO', 'CARABAYLLO','CHACLACAYO','CHORRILLOS','CIENEGUILLA'
,'COMAS','EL_AGUSTINO','INDEPENDENCIA')
dis2[[1]] # get element
dis2[2:5]
dis2[-1] # drop first element
# unlist
unlist(dis2)
# add new element using append
num <- list(13,5,5,8,9,10,5,8,13,1,20)
append(num, 102)
# add a list
num2 <- list(10,20,30)
append(num, num2)
cat("Suma:", sum(unlist(num)),'\n', "Minimo:", min(unlist(num)), '\n', "Maximo:", max(unlist(num)))
# list made of many class objects
list1 <- list(100:130, "R", list(TRUE, FALSE))
#-------------------------------------------------------------#
## OLS ----
set.seed(756)
x1 <- runif(500)
x2 <- runif(500)
x3 <- runif(500)
x4 <- runif(500)
e <- rnorm(500)
# Poblacional regression (Data Generating Process GDP)
Y <- 1 + 0.8*x1 + 1.2*x2 + 0.5*x3 + 1.5*x4 + e
#M1 <- matrix(0,8,2)
X <- cbind(matrix(1,500), x1,x2,x3,x4)
head(X)
#inv(X) or solve (X)
beta <- solve(t(X) %*% X) %*% (t(X) %*% Y)
beta
X <- rnorm(1000, mean=1, sd=0.5)
Xbar <- mean(X)
Xbar
X
Sigma2 <- sum((Xbar-X)^2)/dim(X)[1]
Sigma2
Sigma2
dim(X)[1]
X <- rnorm(1000, mean=1, sd=0.5)
Xbar <- mean(X)
Sigma2 <- sum((Xbar-X)^2)/lenght(X)
X <- rnorm(1000, mean=1, sd=0.5)
Xbar <- mean(X)
Sigma2 <- sum((Xbar-X)^2)/length(X)
Sigma = sqrt(Sigma2)
Sigma2
Sigma
hist(X, bins = 100)
hist(X)
hist(X, breaks = 100)
browseURL("https://r4ds.had.co.nz/")
print("Hello World")
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
install.packages("dplyr")
install.packages("stringr")
library(dplyr) # librarfor cleaning datasets
library(stringr)
library(string)
print("Hola Mundo")
a1 <- 3.1416
typeof(a1)
class(a1)
a2 <- as.integer(a1)   # int(a1)
typeof(a2)
class(a2)
print(round(4.51))
print(4^2)
x <- sqrt(150) ; x
x <- sqrt(150) ; x   # ; print()
y <- log(x) ; y
z <- round(y, 2) ; z
w <- abs(z) ; w
150 %>% sqrt() %>% log() %>% round(2) %>% abs()
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer()
c1 <- "My first python code"
c1 <- "First python code"
c2 <- 'at R y python Class'
c3 <- c1 + c2 # error
a <- paste0(c1,' : semester 2022-1') #paste0 une sin espacios
print(a)
a <- paste0(c1,'semester 2022-1') #paste0 une sin espacios
print(a)
a <- paste0(c1,' : semester 2022-1') #paste0 une sin espacios
print(a)
a <- paste(c1,'semester 2022-1', sep = " : ")
print(a)
a <- paste(c1,'semester 2022-1', sep = " / ")
print(a)
d <- 2022
paste0(c1,' : semester ',d, '-1')
cat('Fisrt letter is :', substr(c1, 1,1)  )
#first word
cat('Fisrt word is :', substr(c1, 1,5)  )
string_1 = 'hello world'
string_2 = '10'
str_to_upper(string_1)
str_to_lower(string_1)
str_length(string_1)
str_split(string_1, " ")  # (word, pattern )
str_split(string_1, "w")
while (TRUE){
coin <- round( runif(1) )  # redondear al entero más cercano
if (coin == 1) {
break
} else {
print(point)
}
}
#  laboratorio 2 ####
# Curso: Laboratorio de R y Python
# @author: Roberto Mendoza
# -------------------------------------------------------#
## Condicional ----
y <- runif(10,-10,10) # runif( n: cantidad de elementos, inicio , final)
if (mean(y) > 0) {
dummy <- 1
} else {
dummy <- 0
}
print(dummy)
## Nested If statement -----
# v <- 2
# v <- NA
# v <- "String"
v <- TRUE
if  ( is.numeric(v) ){
cat(v, " es un numero entero (no missing)")
} else if ( is.na(v) ) {
cat(v, " es un missing")
} else if ( is.character(v) ){
cat(v, " es un string")
} else if ( is.logical(v) ){
cat(v, " es un Boolean")
} else {
print("Sin resultado")
}
# Loops -----
# -------------------------------------------------------#
#  saving
S <- 1000
# Periods
n <- 10
# interes rate
i <- 0.025
year = 1
while (year < n){
S <-  S*(1+i)
year <-  year + 1
cat( "periodo ", year, ": ", S,"\n")
}
## While + If statement ----
w <- 10
while (w > 7  & w <= 15){
coin <- round( runif(1) )
coin
if (coin == 1) {
w <- w + 2
} else {
w <- w - 10
}
}
print(w)
## For ----
ages<-  c(21, 23, 25, 24, 20)
for (age in ages) {
print(age+10 )
}
## For and Next ----
for (i in 1:50) {
if(i %in% 15:20) { # Ignora los primeros 20 elementos
next
print(i  + 1000)
}
cat("Ejecutanto",i,"\n")
}
## For and Next, break ----
for (j in 1:100){
print(j)
if(j > 20){
break
}
}
## While + break ----
while (TRUE){
coin <- round( runif(1) )  # redondear al entero más cercano
if (coin == 1) {
break
} else {
print(point)
}
}
calculator <- function(x,y,z)
{
result = x*y*z
return(result)
}
calculator( 158, 38, 10 )
calculator( 158, 38)
calculator <- function(x,y,z)
{
result = x*y*z
return(result)
}
calculator( 158, 38, 10 )
calculator_square <- function(x,y){
x2 <- x * x
y2 <- y * y
result <- x2 * y2
return(list(x2,y2,paste0("La multiplicación del cuadrado es:", result)) )
}
calculator_square(3, 4)[1]
calculator_square(3, 4)[[1]] # para ontener el elemento simple
calculator_square_2 <- function(x,y){
x2 <- x * x
y2 <- y * y
result <- x2 * y2
if (200 >= result) {
return( cat( "Large number. Get only the result variable: ", result) )
} else {
return( print( "Too large number. Do not return variables!") )
}
}
w <- 10
while (w > 7  & w <= 15){
coin <- round( runif(1) )
print(coin)
if (coin == 1) {
w <- w + 2
} else {
w <- w - 10
}
}
#  laboratorio 1 ####
# Curso: Laboratorio de R y Python
# @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# Libraries ####
#install.packages("dplyr")
#install.packages("stringr")
library(dplyr) # library for cleaning datasets
library(stringr)
#-----------------------------------------------------------------#
#Laboratorio 1 Python
print("Hola Mundo")
## Tipo de variable ####
#Correr la lineas de codugo Ctrl + enter
# Codigo a texto Ctrl + Shift + c"
a1 <- 3.1416
print(a1)
typeof(a1)
class(a1)
is.numeric(a1)
# float to int
a2 <- as.integer(a1)
typeof(a2)
class(a2)
is.numeric(a2)
b1 <- 10000
typeof(b1)
b1 <- as.integer(10000)
# Round a number
print(round(4.51))
# power
print(4^2)
# operator pip %>% (Control + shift + M)
x <- sqrt(150) ; x   # ; print()
y <- log(x) ; y
z <- round(y, 2) ; z
w <- abs(z) ; w
150 %>% sqrt() %>% log() %>% round(2) %>% abs()
sqrt(150) %>% log() %>% round(2) %>% abs()
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% pow(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% power(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% ^2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% *2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% **2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% ^2
2^2
pow(2)
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer()^2
sqrt(150) %>% log %>% round(2) %>% abs %>% as.integer() %>% **2
# Número de países por continente en 2007
bbdd %>% filter(anio == 2007) %>%
group_by(continente)
################  laboratorio 2 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
# permite llamar a varias librerias de manera simultánea
# Si la librería no está instalada, entonces lo instala y llama para su uso
p_load(dplyr, readxl, tidyverse, foreign, datos)
# tidyverse es una recopilación de varias librerias (dply, ggplot, stringr, etc)
# foreign, libreria que permite leer base de datos de diferentes extensiones
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Load datasets ----------------------
datoscsv <- read.csv("../../data/Riesgo_morosidad.csv")
# punto y coma separa los datos
datoscsv <- read.csv("../../data/Riesgo_morosidad.csv", sep = ";")
# read.csv(file, header = TRUE, sep = ",", quote = "\"",
#          dec = ".", fill = TRUE, comment.char = "", ...
str(datoscsv)
# Variables categoricas
datoscsv$sexo      <- factor(datoscsv$sexo, levels = c(1, 2),
labels = c("Masculino", "Femenino"))
levels(datoscsv$sexo)
levels(datoscsv$sexo) <- c("M","F")
datoscsv$fonopart  <- factor(datoscsv$fonopart, levels = c(1, 2),
labels = c("No", "Si"))
datoscsv$fonolab   <- factor(datoscsv$fonolab, levels = c(1, 2),
labels = c("No", "Si"))
datoscsv$autovaluo <- factor(datoscsv$autovaluo, levels = c(1, 2),
labels = c("No", "Si"))
datoscsv$esaval    <- factor(datoscsv$esaval, levels = c(1, 2),
labels = c("No", "Si"))
datoscsv$tieneaval <- factor(datoscsv$tieneaval, levels = c(1, 2),
labels = c("No", "Si"))
datoscsv$tiporenta <- factor(datoscsv$tiporenta, levels = c(2, 3),
labels = c("Fijo", "Variable"))
datoscsv$dpto      <- factor(datoscsv$dpto,
levels = c(1, 2, 3, 4, 5, 6),
labels = c("Lima", "Trujillo", "Arequipa",
"Cusco", "Ica", "Piura"))
datoscsv$morosidad <- factor(datoscsv$morosidad, levels = c(1, 2),
labels = c("No Moroso", "Moroso"))
str(datoscsv)
# Tabla cruzada
table(datoscsv$dpto, datoscsv$morosidad)
#### 1.1 Datos *.TXT ####
datost <- read.table("../../data/Riesgo_morosidad.dat",
sep = "\t")
# primera fila como nombre de las columnas
datost <- read.table("../../data/Riesgo_morosidad.dat",
sep = "\t",
header = TRUE)
str(datost)
# read.table() puede leer archivos *.csv
datoscsv2 <- read.table("../../data/Riesgo_morosidad.csv",
sep = ";",
header = T)
str(datoscsv2)
# Uso read.delim para la lectura de datos delimitados
# En este caso los datos estan delimitados por tab \t
datosd <- read.delim("../../data/Riesgo_morosidad.dat",
sep = "\t",
header = TRUE)
str(datosd)
#### 1.2 Datos SPSS *.sav ####
# read.spss de la libreria foreign
datospss <- read.spss("../../data/Riesgo_morosidad.sav",
use.value.labels = F,
to.data.frame = TRUE)
# permite asignar las etiquetas como datos
datospss <- read.spss("../../data/Riesgo_morosidad.sav",
to.data.frame = TRUE)
str(datospss)
#### 1.3 Datos EXCEL *.XLS *.XLSX ####
datos1_xls  <- read_excel("../../data/Riesgo_morosidad.xls")
datos2_xls  <- read_xls("../../data/Riesgo_morosidad.xls")
datos1_xlsx <- read_excel("../../data/Riesgo_morosidad.xlsx")
datos2_xlsx <- read_xlsx("../../data/Riesgo_morosidad.xlsx")
str(datos1_xlsx)
str(datos1_xls)
datos1_xlsx <- as.data.frame(datos1_xlsx)
str(datos1_xlsx)
# Lectura de caracteres especiales
netflix <- read.csv("../../data/netflix_titles.csv")
netflix <- read.csv("../../data/netflix_titles.csv", encoding = "UTF-8")
netflix <- read.csv("../../data/netflix_titles.csv", encoding = "UTF-8",
na.strings=c("",NA))
# na.strings=c("",NA) reemplaza vacios por missing
#--------------------------------------------#
bbdd <- paises # dataset from "datos" library
write.csv(bbdd, "../../data/paises.csv", row.names = F)
# Base de datos en formato tibble
str(bbdd) # tipo de variable
View(bbdd) # visualización de la base de datos
dim(bbdd) # dimensiones de la base de datos
ncol(bbdd) # numero de columnas
nrow(bbdd) # numero de filas
sapply(bbdd, class)  # tipo de varaible
summary(bbdd)   # principales estadisticas descriptivas
sum(is.na(pais))  # ningun missing en la base país
# Número de países por continente en 2007
bbdd %>% filter(anio == 2007) %>%
group_by(continente) %>% summarise(n())
################  laboratorio 2 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
#install.packages("stringr")
# Library ####
library(pacman)  # permite llamar a varias librerias de manera simultánea
p_load(dplyr, readxl, rstudioapi, stringr)
# dplyr: para manejo de base de datos
# readxl: lectura de archivo excel, csv
# stringi: manejo de texto
# rstudioapi: se aplicará para definir la ruta de trabajo
getwd()
# Set working directory (directorio de trabajo : ruta en la computadora)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
lapply(genero, function(x) {if (x = 'M') 0 else 1 })
lapply(genero, function(x) {if (x == 'M') 0 else 1 })
genero <- c('F', 'M', 'M', 'F', 'M')
lapply(genero, function(x) {if (x == 'M') 0 else 1 })
sapply(genero, function(x)  {if (x == 'M') 0 else 1})
NSE <- c('A', 'A', 'C', 'B', 'C')
sapply(NSE, function(x)  {if (x == 'A') 3 else if (x == 'B') 2 else 1})
vector <- seq(100)
lapply(vector, function(square) {square^2-mean(vector)}) # resultado en formato lista
sapply(vector, function(square) {square^2-mean(vector)}) # vector canonico simple
sapply(vector, function(y) (y- mean(vector)/ sd(vector)))
standarize <- function(i, mean, sd){
( i -  mean ) / sd
}
lapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
sapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
sapply(vector, function(y) (y - mean(vector) ) / sd(vector) )
standarize <- function(i, mean, sd){
( i -  mean ) / sd
}
lapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
sapply(vector,standarize,  mean = mean(vector), sd = sd(vector))
args(sapply)
standarize <- function(i, mean_1, sd_1){
( i -  mean ) / sd
}
standarize <- function(i, mean_1, sd_1){
( i -  mean_1 ) / sd_1
}
sapply(vector, standarize, mean_1 = mean(vector), sd_1 = sd(vector))
args(str_extract)
vector_tx <- c("Tiene 9 años","Dice tener 24 ", "35 years",
"Acabod e cumplir 40", "El año paso tuvo 20")
extract_numb <- function(x){
return(str_extract(x,"\\d+") )
}
sapply(vector_tx, extract_numb)
lapply(vector_tx, extract_numb)
vector_tx <- c("Tiene 9 años","Dice tener 24 ", "35 years",
"Acabod e cumplir 40", "El año paso tuvo 20")
extract_numb <- function(x){
return(as.numeric(  str_extract(x,"\\d+") )  )
}
sapply(vector_tx, extract_numb)
lapply(vector_tx, extract_numb)
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
str(datos) # muestra el tipo de variable de cada columna
View(datos)
str(datos) # muestra el tipo de variable de cada columna
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
table(datos$Channel)
table(datos$Region)
args(apply)
ncol(datos)
apply(datos[, 3:8], 2, sum)  # 2 : suma aplciarse por columna
datos$Ventas <- apply(datos[, 3:8], 1, sum) # creando nueva columna de ventas
apply(datos[,3:8], 2, mean)
apply(datos[,3:8], 2, range) # range devuelve el máximo y minimo
datos2 <- apply(datos[, 3:8], 2, function(x) x/3.9)
View(datos2)
#obtnemos el directorio de trabajo
getwd()
user <- Sys.getenv("USERNAME")  # username estamose xtrayencdo el usuario automaticamente
print(user)
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2023_1/Labs/tarea2") ) # set directorio
#codigo para leer un archivo csv
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
portfolio
