summarize(full$mEE_DR_13_1980_pcSupM_adj)
summary(full$mEE_DR_13_1980_pcSupM_adj)
install.packages("maptools")
install.packages("sp")
library(maptools)
library(sp)
## read shapefiles
shp <- readShapePoly("districts_1975_remake.shp")
shp$di93 = as.numeric(paste(shp$DI93))
prov.map <- readShapePoly("Provinces_1975.shp")
provinces = list("sp.polygons",prov.map,col="grey20")
land = read.csv("PeruLR_1975shapedata.csv",header=T)
full = merge(shp,land,by.x="di93",by.y="ubi12",all.x=T)
full$loglandredist_pc = log(1+100*full$mEE_DR_13_1980_pcSupM_adj)
full$ltotalevents = log(.01+full$totalevents)
## read shapefiles
shp <- readShapePoly("districts_1975_remake.shp")
shp$di93 = as.numeric(paste(shp$DI93))
prov.map <- readShapePoly("Provinces_1975.shp")
provinces = list("sp.polygons",prov.map,col="grey20")
land = read.csv("PeruLR_1975shapedata.csv",header=T)
full = merge(shp,land,by.x="di93",by.y="ubi12",all.x=T)
full$loglandredist_pc = log(1+100*full$mEE_DR_13_1980_pcSupM_adj)
full$ltotalevents = log(.01+full$totalevents)
dev.set(2)
jpeg(filename="Figure2A.jpeg",width = 800, height = 800, units = "px",quality=100)
scale = list("SpatialPolygonsRescale",layout.scale.bar(),offset=c(-71.25,9),scale=3,
fill=c("transparent","black"))
text1 = list("sp.text", c(-71.25,9.5), "0", cex = 1.5)
text2 = list("sp.text", c(-68.25,9.5), "200 mi", cex = 1.5)
arrow = list("SpatialPolygonsRescale",layout.north.arrow(),offset=c(-70,10),scale=1.5)
spplot(full,"loglandredist_pc",col.regions=rev(gray.colors(16,.05,1)),col="transparent",sp.layout=list(provinces,scale,text1,text2,arrow))
dev.off()
# Integrantes ####
# Kevin Pareja (20196318)
# Elian Tongombol (20196453)
# Paola Aranda (20196052)
# Maria Alejandra Colan (20190515)
# Consideraciones previas: #####
## Borrando el environment ####
rm(list = ls())
## Borrando los graficos ####
graphics.off()
##Borrando la consola ####
cat("\014")
## Llamando a los directorios necesarios
library(dplyr)
library(stringr)
# Desarrollo de las preguntas ####
## Pregunta 1: Condicional 1 ####
# Consideramos a "compra" como el monto a pagar
pago <- 400
#Usamos el comando if para indicar que si es una cantidad menor igual a 100 soles, se paga en efectivo.
#En caso contrario, se sigue la condici?n else if.
#En cualquier otro caso, se usa la condici?n else.
if (pago <= 100) {
cat ("Compra de", pago, "soles y pago en efectivo")
} else if ((pago>100) & (pago<=300)) {
cat ("Compra de", pago, "soles y pago con tarjeta de d?bito")
} else {
cat ("Compra de", (pago*0.9), "soles y pago con tarjeta de cr?dito")
}
## Pregunta 2: Condicional 2 ####
#Definimos la funci?n fx1, que afecta a la variable x.
#Usamos if para la primera condicional
#Else if para el siguiente caso
#Else para cualquier otro caso
#Especificamos que la funci?n nos debe dar como return a "result".
fx1 <- function(x)
{
if ((x=>0) & (x<100)) {
#Especificamos que la funci?n nos debe dar como return a "result".
fx1 <- function(x)
{
if ((x >= 0) & (x<100)) {
result = x^(1/2)
} else if ((x>=100) & (x<300)) {
result = x-5
} else {
result = 50
}
return(result)
}
# Vector con las utilidades netas anuales
utilidades <- c(100, 152, -1 , 8, 12, 156,35, -10, 100, -0.5, 30, 1050 , 7, -10)
# Creamos el bucle for
for (uneta in utilidades) {
# Cuando la utilidad es negativa, saltar a la siguiente iteración
if (uneta < 0) {
next
}
# Cuando la utilidad es mayor que 1000, salir del bucle
if (uneta > 1000) {
break
}
# Mensaje con la utilidad neta anual
mensaje <- paste("La utilidad neta anual es", uneta, "millones")
print(mensaje)
}
#PREGUNTAS SOLO EN R
## Pregunta 4: Funcion para calcular el factorial de un numero n! ####
factorial <- function(n) {
if(n == 0) {
return(1) # El factorial de 0 es 1
} else {
return(n * factorial(n-1))
}
}
#a modo de ejemplo probamos el factorial de 7:
factorial (7)
## Pregunta 5: Funcion de masa corporal ####
#creamos la función del imc
calcular_imc <- function(peso, talla){
imc <- peso / talla^2
#colocamos los criterios según la tabla IMC
clasificacion <- "Desconocido"
if (imc>= 18.5 && imc <= 24.9){
clasificacion <- "Normal"
} else if(imc >= 25 && imc <= 29.9){
clasificacion <- "Sobrepeso"
} else if(imc >= 30 && imc <= 34.9){
clasificacion <- "Obesidad grado I"
} else if(imc >= 35 && imc <=39.9){
clasificacion <- "Obesidad grado II"
} else if (imc >= 40){
clasificacion <- "Obesidad grado III"
}
resultado <- list(peso = peso, talla = talla, imc = imc, clasificacion = clasificacion)
return(resultado)
}
#colocamos los datos de cada estudiante
estudiante_1 <- calcular_imc(peso = 70, talla = 1.5)
estudiante_2 <- calcular_imc(peso = 85, talla = 1.8)
estudiante_3 <- calcular_imc(peso = 50, talla = 1.6)
#vemos los 4 outcomes:
estudiante_1
estudiante_2
estudiante_3
## Pregunta 6: Funcion aplicando activos financieros ####
#obtnemos el directorio de trabajo
getwd()
user <- Sys.getenv("USERNAME")  # username estamose xtrayencdo el usuario automaticamente
print(user)
setwd( paste0("C:/Users/",user,"/Documents/GitHub/1ECO35_2023_1/Labs/tarea2") ) # set directorio
#codigo para leer un archivo csv
portfolio <- read.csv("../../data/Portafolio.csv", encoding = "UTF-8")
portfolio
calculadora <- function(data){ # se aplica la funcion aplicada a una base de datos
X <- data$X #extrayendo cada fila de datos
Y <- data$Y
w1 <- 0.2
w2 <- 0.8
#formula de Coef. de correlacion de Pearson: formula --> COV(X,Y)/(var(x)*var(y))^0.5
pearson <- (cov(X,Y))/((var(X)*var(Y))^0.5)
varianza <- (var(X)*w1^2)+(var(Y)*w2^2)+(2*cov(X,Y)*w1*w2)
return(list(pearson,varianza))
}
calculadora(portfolio)
fx1 <- function(x)
{
if ((x =>0) & (x<100)) {
fx1 <- function(x)
{
if ((x >= 0) & (x<100)) {
result = x^(1/2)
} else if ((x>=100) & (x<300)) {
result = x-5
} else {
result = 50
}
return(result)
}
#Probamos la funci?n
fx1( 400 )
################  laboratorio 6 ############################
## Curso: Laboratorio de R y Python ###########################
## @author: Roberto Mendoza
# clean environment variables
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
library(pacman)
p_load(readxl, tidyverse, foreign)
datospss <- read.spss("../../data/Riesgo_morosidad.sav",
use.value.labels = F,
to.data.frame = TRUE)
attributes(datospss)$variable.labels  # etiqueta de variable
attributes(datospss)$variable.label
sapply(datospss, attr, "label")
sapply(datospss, attr, "labels")
ggplot(datospss) + aes(morosidad)
ggplot(datospss) + aes(morosidad) +
geom_bar(stat = "count")  # por default es count de contabilizar
sapply(datospss, attr, "labels")
attributes(datospss)
value_label <- read.spss("../../data/Riesgo_morosidad.sav"
)
# etiqueta de valores
attributes(value_label)$label.table
attr(value_label$morosidad, "labels")
attr(value_label, "labels")
value_label <- read.spss("../../data/Riesgo_morosidad.sav"
)
# etiqueta de valores
attributes(value_label)$label.table
datospss <- read.spss("../../data/Riesgo_morosidad.sav",
use.value.labels = F,
to.data.frame = TRUE)
attributes(datospss)$variable.labels  # etiqueta de variable
ggplot(datos) +  aes(y = morosidad) + geom_bar()
ggplot(datospss) +  aes(y = morosidad) + geom_bar()
ggplot(datospss, aes(morosidad)) + geom_bar()     # es equivalente
ggplot(datospss) + aes(morosidad) + geom_bar() +
coord_flip()
browseURL("http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf")
ggplot(datospss) + aes(morosidad) +
geom_bar() + theme_test()
ggplot(datos) + aes(morosidad)  +
geom_bar() +
theme_light()
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_light()
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_bw()
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme()
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_minimal()
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme()
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_minimal()
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_bw()
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_bw(10)
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_bw(1)
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_bw(20)
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_bw(15)
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_bw(12)
ggplot(datospss, aes(morosidad)) + geom_bar()+
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia")
ggplot(datospss, aes(morosidad)) + geom_bar()+
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss, aes(morosidad)) + geom_bar()+
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss, aes(morosidad)) +
geom_bar(color = "blue", fill = "white")+
theme_minimal() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss, aes(morosidad)) +
geom_bar(color = "blue", fill = "white")+
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss, aes(morosidad)) + geom_bar()+
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss) + aes(morosidad)  +
geom_bar() +
theme_bw(12)
ggplot(datospss, aes(morosidad)) +
geom_bar(color = "blue", fill = "white")+
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss, aes(morosidad)) +
geom_bar(color = "blue", fill = c("white","orange"))+
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
browseURL("https://www.rapidtables.com/web/color/RGB_Color.html")
ggplot(datos) + aes(morosidad) +
geom_bar(color = "#010800", fill = c("#DF2B57", "#FFA500")) +
theme_light() +
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia")
ggplot(datos) + aes(morosidad) +
geom_bar(color = "#010800", fill = c("#DF2B57", "#FFA500")) +
theme_light() +
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia")
ggplot(datos) + aes(morosidad) +
geom_bar(color = "#010800", fill = c("#DF2B57", "#FFA500")) +
theme_light() +
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia")
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "#010800", fill = c("#DF2B57", "#FFA500")) +
theme_light() +
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia")
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "	#0000FF", fill = c("#DF2B57", "	#FFFFFF")) +
theme_test() +
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia")
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "	#0000FF", fill = c("#DF2B57", "#FFFFFF")) +
theme_test() +
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia")
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "#0000FF", fill = c("#DF2B57", "#FFFFFF")) +
theme_test() +
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia")
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "#0000FF", fill = c("#FFFFFF", "#FFA500")) +
theme_test() +
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia")
ggplot(datospss, aes(morosidad)) +
geom_bar(color = "blue", fill = c("white","orange"))+
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "#0000FF", fill = c("#FFFFFF", "#FFA500")) +
theme_test() +
labs(title = "Gráfico de Barras de morosidad",
x = "Condición de la morosidad",
y = "Frecuencia absoluta")
browseURL("https://damzar.medium.com/eso-que-quieres-decir-hazlo-con-gr%C3%A1ficas-fc7b4963d9d3")
browseURL("https://rkabacoff.github.io/datavis/")
p_load(readxl, tidyverse, foreign, ggthemes)
library(ggthemes)
length(levels(morosidad))
datospss <- read.spss("../../data/Riesgo_morosidad.sav",
use.value.labels = F,
to.data.frame = TRUE)
attr(datospss, "variable.label")
attr(datospss, "variable.labels")
attr(datospss, "value.labels")
attr(datospss, "label.table")
attr(datospss, "value.labels")
attr(datospss, "values.labels")
ggplot(datospss) + aes(morosidad) +
geom_bar(color = "black", fill = rainbow(2)) +
theme_light() +
labs(title = "Gráfico de Barras Vertical",
x = "Condición de la morosidad",
y = "Frecuencia")
ggplot(datos) + aes(x = dpto) +
geom_bar(fill = rainbow(6))
ggplot(datospss) + aes(x = dpto) +
geom_bar(fill = rainbow(6))
length(levels(dpto))
ggplot(datos) + aes(x = dpto) +
geom_bar(fill = rainbow(length(unique(dpto))))
ggplot(datospss) + aes(x = dpto) +
geom_bar(fill = heat.colors(6))
ggplot(datospss) + aes(x = dpto) +
geom_bar(fill = terrain.colors(6))
ggplot(datospss) + aes(x = dpto) +
geom_bar(fill = topo.colors(6))
ggplot(datospss) + aes(x = dpto) +
geom_bar(fill = cm.colors(6))
ggplot(datospss) + aes(x = dpto) +
geom_bar(fill = terrain.colors(6))
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack()) +
theme_bw() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss, aes(x = tiporenta, fill = morosidad ) ) +
geom_bar(position = position_fill()) +
theme_bw() +
labs(title = "Situación de la Morosidad según el Tipo de Renta",
x = "Tipo de Renta",
y = "Proporción") +
scale_fill_manual(values = c("darkolivegreen3", "firebrick2"))
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack()) +
theme_bw() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss, aes(x = tiporenta, fill = morosidad ) ) +
geom_bar(position = position_fill()) +
theme_bw() +
labs(title = "Situación de la Morosidad según el Tipo de Renta",
x = "Tipo de Renta",
y = "Proporción") +
scale_fill_manual(values = c("darkolivegreen3", "firebrick2"))
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack()) +
theme_bw() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack(), fill = c("#FFFFFF", "#FFA500")) +
theme_bw() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack(), fill = c("blue", "#FFA500")) +
theme_bw() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_dodge()) +
theme_bw() +
labs(title = "Situación de la Morosidad según el Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")  +
scale_fill_manual(values = c("darkolivegreen3", "firebrick2"))
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_dodge()) +
theme_bw() +
labs(title = "Situación de la Morosidad según el Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")  +
scale_fill_manual(values = c("blue", "orange"))
ggplot(datospss) + aes(x = tiporenta, fill = morosidad) +
geom_bar(position = position_stack(), fill = c("blue", "#FFA500")) +
theme_bw() +
labs(title = "Situación de la Morosidad según Tipo de Renta",
x = "Tipo de Renta",
y = "Frecuencia")
