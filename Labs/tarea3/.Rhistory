# No scientific notation
# Library ####
#install.packages("pacman")
library(pacman)
# permite llamar a varias librerias de manera simultánea
# Si la librería no está instalada, entonces lo instala y llama para su uso
p_load(dplyr, readxl, tidyverse, foreign, datos)
# tidyverse es una recopilación de varias librerias (dply, ggplot, stringr, etc)
# foreign, libreria que permite leer base de datos de diferentes extensiones
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#### 1.3 Datos EXCEL *.XLS *.XLSX ####
datos1_xls  <- read_excel("../../data/Riesgo_morosidad.xls")
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv")
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv")
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv")
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv")
View(datos1_csv)
View(datos)
View(datos1_csv)
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv"header = TRUE, sep = ";")
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv",header = TRUE, sep = ";")
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
# No scientific notation
# Library ####
#install.packages("pacman")
library(pacman)
# permite llamar a varias librerias de manera simultánea
# Si la librería no está instalada, entonces lo instala y llama para su uso
p_load(dplyr, readxl, tidyverse, foreign, datos)
# tidyverse es una recopilación de varias librerias (dply, ggplot, stringr, etc)
# foreign, libreria que permite leer base de datos de diferentes extensiones
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#### 1.3 Datos EXCEL *.XLS *.XLSX ####
datos1_xls  <- read_excel("../../data/Riesgo_morosidad.xls")
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv")
datos <- read_xlsx("../../data/BDD_compras_consumidores.xlsx")
netflix <- read.csv("../../data/netflix_titles.csv", encoding = "UTF-8",
na.strings=c("",NA))
View(netflix)
View(netflix)
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv",encoding = "UTF-8",
na.strings=c("",NA))
p_load(dplyr, readxl, tidyverse, foreign, datos)
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv",encoding = "UTF-8",
na.strings=c("",NA))
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv")
View(datos1_csv)
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv")
netflix <- read.csv("../../data/netflix_titles.csv")
View(netflix)
netflix <- read.csv("../../data/netflix_titles.csv", encoding = "UTF-8",
na.strings=c("",NA))
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv")
View(datos1_csv)
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv",sep = ";")
datoscsv <- read.csv("../../data/Riesgo_morosidad.csv")
rm(list = ls())
# clean plots
graphics.off()
# clean console
cat("\014")
# additional options
options(scipen = 999)      # No scientific notation
# Library ####
#install.packages("pacman")
library(pacman)
# permite llamar a varias librerias de manera simultánea
# Si la librería no está instalada, entonces lo instala y llama para su uso
p_load(dplyr, readxl, tidyverse, foreign, datos)
# tidyverse es una recopilación de varias librerias (dply, ggplot, stringr, etc)
# foreign, libreria que permite leer base de datos de diferentes extensiones
# Change working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Load datasets ----------------------
# csv (comma separated values)
datoscsv <- read.csv("../../data/Riesgo_morosidad.csv")
View(datoscsv)
datoscsv <- read.csv("../../data/Riesgo_morosidad.csv", sep = ";")
View(datoscsv)
datoscsv <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
datoscsv <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datoscsv)
datos1_csv <- read_csv("../../data/BDD_compras_consumidores.csv", sep = ";")
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
datoscsv <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos1_csv)
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
datoscsv <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos1csv)
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
datoscsv <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datoscsv)
str(datoscsv)
datos$Channel <- factor(datos$Channel)
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
#Hacemos la separación de comas
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
#Hacemos la separación de comas
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
vector <- runif(100)
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
minimos <- apply(datos[, 3:8], 2, min)
maximos <- apply(datos[, 3:8], 2, max)
datos_esc <- sapply(datos[, 3:8], function(x) (x - minimos) / (maximos - minimos))
View(datos_esc)
datos_esc <- apply(datos[, 3:8], 2, function(x) (x - minimos) / (maximos - minimos))
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
str(datos) # muestra el tipo de variable de cada columna
# str()  .info()
# Convirtiendo a variables categórica
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
# Tabla de frecuencia de algunas variables
table(datos$Channel)
table(datos$Region)
apply(datos[, 3:8], 2, sum)  # 2 : suma aplciarse por columna
datos$Ventas <- apply(datos[, 3:8], 1, sum) # creando nueva columna de ventas
# 2 es por columnas (total de ventas por tipo de producto)
apply(datos[,3:8], 2, mean)
getGroupMembers("Summary")
apply(datos[,3:8], 2, min)
apply(datos[,3:8], 2, max)
apply(datos[,3:8], 2, range)
datos2 <- apply(datos[, 3:8], 2, function(x) x/3.9)
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
#Hacemos la separación de comas
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
#creamos el vector
vector <- runif(100)
#generamos el min y el max
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
#paralos datos
minimos <- apply(datos[, 3:8], 2, min)
maximos <- apply(datos[, 3:8], 2, max)
datos_esc <- sapply(datos[, 3:8], function(x) (x - minimos) / (maximos - minimos))
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
getwd()
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
vector <- runif(100)
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
minimos <- apply(datos[, 3:8], 2, min)
maximos <- apply(datos[, 3:8], 2, max)
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
#creamos el vector
vector <- runif(100)
#generamos el min y el max
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
minimos <- sapply(datos[, 3:8], 2, min)
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
#Hacemos la separación de comas
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
#creamos el vector
vector <- runif(100)
#generamos el min y el max
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
#paralos datos
minimos <- apply(datos[, 3:8], 2, min)
maximos <- apply(datos[, 3:8], 2, max)
datos_esc <- apply(datos[, 3:8], function(x) (x - minimos) / (maximos - minimos))
datos_esc <- sapply(datos[, 3:8], function(x) (x - minimos) / (maximos - minimos))
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
vector <- runif(100)
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
#paralos datos
apply(datos[, 3:8], 2, min)
apply(datos[, 3:8], 2, max)
datos_esc <- sapply(datos[, 3:8], function(x) (x - minimos) / (maximos - minimos))
write.csv(datos_esc, "datos_esc.csv", row.names = FALSE)
datos_esc <- sapply(datos[, 3:8], function(x) (x - minimo) / (maximos - minimo))
View(datos_esc)
minimos <- apply(datos[, 3:8], 2, min)
maximos <- apply(datos[, 3:8], 2, max)
library(purrr)
datos_esc <- datos[, 3:8] %>%
map_dfc(~(. - min(.)) / (max(.) - min(.)))
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
p_load(dplyr, readxl, tidyverse, foreign, datos)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
#Hacemos la separación de comas
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
#creamos el vector
vector <- runif(100)
#generamos el min y el max
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
#para los datos
minimos <- apply(datos[, 3:8], 2, min)
maximos <- apply(datos[, 3:8], 2, max)
library(purrr)
datos_esc <- datos[, 3:8] %>%
map_dfc(~(. - min(.)) / (max(.) - min(.)))
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
#Hacemos la separación de comas
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
#creamos el vector
vector <- runif(100)
#generamos el min y el max
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
#para los datos
minimos <- apply(datos[, 3:8], 2, min)
maximos <- apply(datos[, 3:8], 2, max)
library(purrr)
datos_esc <- datos[, 3:8] %>%
map_dfc(~(. - min(.)) / (max(.) - min(.)))
write_csv(datos_esc, "datos_esc.csv", col_names = TRUE)
vector <- runif(100)
vector <- runif(100)
#generamos el min y el max
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
View(vector_esc)
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
#Hacemos la separación de comas
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
#creamos el vector
vector <- runif(100)
#generamos el min y el max
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
View(vector_esc)
#para los datos
minimos <- apply(datos[, 3:8], 2, min)
maximos <- apply(datos[, 3:8], 2, max)
library(purrr)
datos_esc <- datos[, 3:8] %>%
map_dfc(~(. - min(.)) / (max(.) - min(.)))
write_csv(datos_esc, "datos_esc.csv", col_names = TRUE)
View(datos_esc)
#TAREA 3
#PARTE EN R Y PYTHON
#Map, sapply, apply, función Lambda
#Aplique la siguiente función a un vector de 100 numeros aleatorios y
#a las columnas numéricas de la base de datos BDD_compras_consumidores.xlsx
#escalamiento=(Xi-min(x))
#donde min(x) y max(x) son el minimo y maximo valor del vector asi como
#de cada columna según corresponda. Por su parte, representa cada número.
#Este transformación de los permite reescalarlos entre valores de 0 a 1.
#Los modelos de aprendizaje (machine learning) requieron este tipo de
#transformación en los datos.
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
#Hacemos la separación de comas
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
#creamos el vector
vector <- runif(100)
#generamos el min y el max
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
View(vector_esc)
#para los datos
minimos <- apply(datos[, 3:8], 2, min)
maximos <- apply(datos[, 3:8], 2, max)
library(purrr)
datos_esc <- datos[, 3:8] %>%
map_dfc(~(. - min(.)) / (max(.) - min(.)))
view(datos_esc)
write_csv(datos_esc, "datos_esc.csv", col_names = TRUE)
#TAREA 3
#PARTE EN R Y PYTHON
#Map, sapply, apply, función Lambda
#Aplique la siguiente función a un vector de 100 numeros aleatorios y
#a las columnas numéricas de la base de datos BDD_compras_consumidores.xlsx
#escalamiento=(Xi-min(x))
#donde min(x) y max(x) son el minimo y maximo valor del vector asi como
#de cada columna según corresponda. Por su parte, representa cada número.
#Este transformación de los permite reescalarlos entre valores de 0 a 1.
#Los modelos de aprendizaje (machine learning) requieron este tipo de
#transformación en los datos.
rm(list = ls())
graphics.off()
cat("\014")
library(pacman)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
#Los datos estaban en formato csv
#Hacemos la separación de comas
datos <- read.csv("../../data/BDD_compras_consumidores.csv", sep = ";")
View(datos)
str(datos)
datos$Channel <- factor(datos$Channel)
datos$Region  <- factor(datos$Region)
str(datos)
#creamos el vector
vector <- runif(100)
#generamos el min y el max
minimo <- min(vector)
maximo <- max(vector)
vector_esc <- (vector - minimo) / (maximo - minimo)
View(vector_esc)
#para los datos
minimos <- apply(datos[, 3:8], 2, min)
maximos <- apply(datos[, 3:8], 2, max)
library(purrr)
datos_esc <- datos[, 3:8] %>%
map_dfc(~(. - min(.)) / (max(.) - min(.)))
view(datos_esc)
write_csv(datos_esc, "datos_esc.csv", col_names = TRUE)
